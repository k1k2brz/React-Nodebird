{"ast":null,"code":"import { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nfunction loadPostsAPI(data) {\n  return axios.get('/post', data);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    // yield delay(1000);\n    // const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n      // data: generateDummyPost(10), // reducer에서 만든 함수\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  // req.body.content로 받을 수 있도록 이름을 붙여준다.\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n      // action.data에 작성한 글이 들어있음 (더미데이터)\n      // data: {\n      //     id,\n      //     content: action.data,\n      // }\n    });\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete('/post', data);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    const id = shortId.generate();\n    // POST reducer 상태랑 user reducer상태랑 동시에 바꿀 수 없기 때문에 action이 2개가 나온다.\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      // action.data에 작성한 글이 들어있음\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  /** 쿠키를 같이 전달 해준다 (도메인이 다르면 쿠키도 전달이 안되니까 backend의 cors와 여기)\r\n   withCredentials: true로 쿠키전달 허용\r\n   */\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  // 무한스크롤 이벤트 대량발생 방지\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","put","takeLatest","throttle","call","shortId","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","result","type","err","console","error","response","addPostAPI","post","content","addPost","id","removePostAPI","delete","removePost","generate","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/sagas/post.tsx"],"sourcesContent":["import { all, fork, delay, put, takeEvery, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport axios from 'axios';\r\nimport {\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/post', data)\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.data)\r\n        // yield delay(1000);\r\n        // const id = shortId.generate();\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n            // data: generateDummyPost(10), // reducer에서 만든 함수\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    // req.body.content로 받을 수 있도록 이름을 붙여준다.\r\n    return axios.post('/post', { content: data })\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data)\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n            // action.data에 작성한 글이 들어있음 (더미데이터)\r\n            // data: {\r\n            //     id,\r\n            //     content: action.data,\r\n            // }\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/post', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data)\r\n        const id = shortId.generate();\r\n        // POST reducer 상태랑 user reducer상태랑 동시에 바꿀 수 없기 때문에 action이 2개가 나온다.\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // action.data에 작성한 글이 들어있음\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            }\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: id,\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    /** 쿠키를 같이 전달 해준다 (도메인이 다르면 쿠키도 전달이 안되니까 backend의 cors와 여기)\r\n     withCredentials: true로 쿠키전달 허용\r\n     */\r\n    return axios.post(`/post/${data.postId}/comment`, data) // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    // 무한스크롤 이벤트 대량발생 방지\r\n    yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}