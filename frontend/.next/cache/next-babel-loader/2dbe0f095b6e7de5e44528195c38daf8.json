{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_REQUEST, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from '../reducers/user';\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\nfunction* followOut() {\n  try {\n    // const result = yield call(followAPI)\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS\n      // data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction unfollowAPI() {\n  return axios.post('/api/unfollow');\n}\nfunction* unfollowOut() {\n  try {\n    // const result = yield call(unfollowAPI)\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS\n      // data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// login 할때 받아와야 하는 data\nfunction logInAPI(data) {\n  // API는 제너레이터가 아님 주의할 것 \n  return axios.post('/api/login', data);\n}\n\n// call을 사용하면 이렇게 펼쳐서 적어줘야 함\n// logInAPI(action.data);\n// call(logInAPI, action.data);\n\n// action.type 하면 Login request가 나오고 action.data하면 로그인 데이터가 들어있음\nfunction* logIn(action) {\n  // 요청의 결과를 받는다.\n  try {\n    // fork는 비동기 함수호출 (결과값 상관없이 바로 실행)\n    // call은 동기 함수호출 (결과값 받아올 때 까지 기다림 (ex)then(() => )를 받아오듯)\n\n    // const result = yield call(logInAPI, action.data)\n    yield delay(1000); // 서버가 아직 없기 때문에\n    // call(logInAPI, action.data)처럼 작성해야 테스트하기 쉽다.\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    //성공은 result.data 실패는 err.response.data에 담긴다\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI)\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n      // data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction signUpAPI() {\n  return axios.post('/api/signUp');\n}\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI)\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n      // data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n// 한 번 밖에 받지 않는다 (1번 받고나면 이벤트 리스너 사라짐)\n// 1. takeEvery를 사용하거나 (while문 대체) 2. while로 감싸서 무한으로 실행되게 해준다. (잘 안씀)\nfunction* watchLogIn() {\n  // LOG_IN이란 액션이 실행될 때 까지 기다리겠다.\n  // 어차피 Login이 request 되는 순간에 실행되니까\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n  // 만약 takeLatest를 사용하면 2회 이상 연속으로 눌렀을 때 마지막꺼만 실행 (마우스 고장 등으로)\n  // 그러나 프론트에서만 마지막꺼 사용하는거고 백엔드에서는 두번 요청 보냄 (서버에는 두번 저장된다)\n  // throttle로 시간제한을 둬서 제한시간 이내 여러번 클릭시 한번만 요청하게 함\n\n  // 첫번째꺼만 실행하는 방법도 있음 takeReading?\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["all","fork","delay","put","takeLatest","axios","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_FAILURE","LOG_OUT_REQUEST","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","followAPI","post","followOut","type","err","error","response","data","unfollowAPI","unfollowOut","logInAPI","logIn","action","logOutAPI","logOut","signUpAPI","signUp","watchFollow","follow","watchUnfollow","unfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/sagas/user.tsx"],"sourcesContent":["import { all, fork, delay, put, takeEvery, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_REQUEST,\r\n    SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS,\r\n    FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS,\r\n    FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction followAPI() {\r\n    return axios.post('/api/follow')\r\n}\r\n\r\nfunction* followOut() {\r\n    try {\r\n        // const result = yield call(followAPI)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            // data: result.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n    return axios.post('/api/unfollow')\r\n}\r\n\r\nfunction* unfollowOut() {\r\n    try {\r\n        // const result = yield call(unfollowAPI)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            // data: result.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n// login 할때 받아와야 하는 data\r\nfunction logInAPI(data) {\r\n    // API는 제너레이터가 아님 주의할 것 \r\n    return axios.post('/api/login', data)\r\n}\r\n\r\n// call을 사용하면 이렇게 펼쳐서 적어줘야 함\r\n// logInAPI(action.data);\r\n// call(logInAPI, action.data);\r\n\r\n// action.type 하면 Login request가 나오고 action.data하면 로그인 데이터가 들어있음\r\nfunction* logIn(action) {\r\n    // 요청의 결과를 받는다.\r\n    try {\r\n        // fork는 비동기 함수호출 (결과값 상관없이 바로 실행)\r\n        // call은 동기 함수호출 (결과값 받아올 때 까지 기다림 (ex)then(() => )를 받아오듯)\r\n\r\n        // const result = yield call(logInAPI, action.data)\r\n        yield delay(1000); // 서버가 아직 없기 때문에\r\n        // call(logInAPI, action.data)처럼 작성해야 테스트하기 쉽다.\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data,\r\n        })\r\n    } catch (err) {\r\n        //성공은 result.data 실패는 err.response.data에 담긴다\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n            // data: result.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI() {\r\n    return axios.post('/api/signUp')\r\n}\r\n\r\nfunction* signUp() {\r\n    try {\r\n        // const result = yield call(signUpAPI)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n            // data: result.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n// 한 번 밖에 받지 않는다 (1번 받고나면 이벤트 리스너 사라짐)\r\n// 1. takeEvery를 사용하거나 (while문 대체) 2. while로 감싸서 무한으로 실행되게 해준다. (잘 안씀)\r\nfunction* watchLogIn() {\r\n    // LOG_IN이란 액션이 실행될 때 까지 기다리겠다.\r\n    // 어차피 Login이 request 되는 순간에 실행되니까\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n    // 만약 takeLatest를 사용하면 2회 이상 연속으로 눌렀을 때 마지막꺼만 실행 (마우스 고장 등으로)\r\n    // 그러나 프론트에서만 마지막꺼 사용하는거고 백엔드에서는 두번 요청 보냄 (서버에는 두번 저장된다)\r\n    // throttle로 시간제한을 둬서 제한시간 이내 여러번 클릭시 한번만 요청하게 함\r\n\r\n    // 첫번째꺼만 실행하는 방법도 있음 takeReading?\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}