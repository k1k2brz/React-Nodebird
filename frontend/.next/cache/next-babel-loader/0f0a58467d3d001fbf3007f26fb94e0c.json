{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport { faker } from '@faker-js/faker';\nexport var initialState = {\n  //     {\n  //     id: 1,\n  //     User: {\n  //         id: 1,\n  //         nickname: 'TaeIl'\n  //     },\n  //     content: '첫 번째 게시글 #해시태그 #익스프레스',\n  //     Images: [{\n  //         id: shortId.generate(),\n  //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n  //     }, {\n  //         id: shortId.generate(),\n  //         src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n  //     }, {\n  //         id: shortId.generate(),\n  //         src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n  //     }],\n  //     // 대문자는 서버에서 주는 애들\n  //     Comments: [{\n  //         id: shortId.generate(),\n  //         User: {\n  //             id: shortId.generate(),\n  //             nickname: 'nero',\n  //         },\n  //         content: '우와 개정판이 나왔군요~',\n  //     }, {\n  //         id: shortId.generate(),\n  //         User: {\n  //             id: shortId.generate(),\n  //             nickname: 'hero',\n  //         },\n  //         content: '얼른 사고싶어요~',\n  //     }]\n  // }\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  // infinite scroll\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n\n// infinite scrolling\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill(undefined).map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.internet.userName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.internet.userName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\n\n// 변수로 지정해주면 편하다\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\n\n// 화면 로딩하면\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\n\n// 동적 액션 크리에이터\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    // shortId를 넣으면 더미데이터 Encountered two children with the same key에러는 해결이 되지만\n    // Failed prop type에러가 뜬다. 나중에 실제 데이터 넣어서 해결해야 할 듯\n    id: data.id,\n    // 게시글\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'Violet'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\n// const dummyComment = (data) => ({\n//     id: shortId.generate(),\n//     content: data,\n//     User: {\n//         id: 1,\n//         nickname: 'Violet',\n//     },\n// });\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  // 불변성을 지키면서 코드 작성하는게 어려우니까 도와주는 라이브러리 immer\n  // immer 사용\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      // return {\n      //     ...state,\n      // 맨 앞에 dummyPost추가해야 맨 위에 게시글 올라간다.\n      // sagas의 post에서 넘어온 게시글 action.data\n      // mainPosts: [dummyPost(action.data), ...state.mainPosts],\n      //     addPostLoading: true,\n      //     addPostDone: true,\n      // }\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = true;\n        draft.removePostDone = true;\n        // 앞에서 dummyPost추가해야 맨 위\n        // sagas의 post에서 넘어온 게시글 action.data\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          // action.data.content, postId, userId가 action.data에 들어있는 상태\n          // 불변성을 지키는 코드 (immer 라이브러리 사용하면 더 간단하게 가능)\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments]\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     // 앞에서 dummyPost추가해야 맨 위\n          //     mainPosts: [dummyPost, ...state.mainPosts],\n          //     addCommentLoading: true,\n          //     addCommentDone: true,\n          // }\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","undefined","map","id","generate","User","nickname","internet","userName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","PostId"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/reducers/post.tsx"],"sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport { faker } from '@faker-js/faker';\r\n\r\nexport type mainPost = {\r\n    mainPosts: any,\r\n    imagePaths: object[],\r\n    addPostLoading: boolean,\r\n    addPostDone: boolean,\r\n    addPostError: boolean,\r\n    addCommentLoading: boolean,\r\n    addCommentDone: boolean,\r\n    addCommentError: boolean,\r\n    hasMorePosts: boolean,\r\n    loadPostsLoading: boolean,\r\n    loadPostsDone: boolean,\r\n    loadPostsError: boolean,\r\n    removePostLoading: boolean,\r\n    removePostDone: boolean,\r\n    removePostError: boolean,\r\n}\r\n\r\nexport const initialState: mainPost = {\r\n    //     {\r\n    //     id: 1,\r\n    //     User: {\r\n    //         id: 1,\r\n    //         nickname: 'TaeIl'\r\n    //     },\r\n    //     content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n    //     Images: [{\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n    //     }],\r\n    //     // 대문자는 서버에서 주는 애들\r\n    //     Comments: [{\r\n    //         id: shortId.generate(),\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: 'nero',\r\n    //         },\r\n    //         content: '우와 개정판이 나왔군요~',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: 'hero',\r\n    //         },\r\n    //         content: '얼른 사고싶어요~',\r\n    //     }]\r\n    // }\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true, // infinite scroll\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n}\r\n\r\n// infinite scrolling\r\nexport const generateDummyPost = (number) => Array(number).fill(undefined).map(() => ({\r\n    id: shortId.generate(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.internet.userName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.internet.userName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\n\r\n// 변수로 지정해주면 편하다\r\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\r\n\r\n// 화면 로딩하면\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST' as const;\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS' as const;\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE' as const;\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST' as const;\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS' as const;\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE' as const;\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST' as const;\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS' as const;\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE' as const;\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST' as const;\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS' as const;\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE' as const;\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\n\r\n// 동적 액션 크리에이터\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n    // shortId를 넣으면 더미데이터 Encountered two children with the same key에러는 해결이 되지만\r\n    // Failed prop type에러가 뜬다. 나중에 실제 데이터 넣어서 해결해야 할 듯\r\n    id: data.id,\r\n    // 게시글\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Violet',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\n// const dummyComment = (data) => ({\r\n//     id: shortId.generate(),\r\n//     content: data,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'Violet',\r\n//     },\r\n// });\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state: mainPost = initialState, action: any) => {\r\n    // 불변성을 지키면서 코드 작성하는게 어려우니까 도와주는 라이브러리 immer\r\n    // immer 사용\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePosts = draft.mainPosts.length < 50;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(action.data);\r\n                break;\r\n            // return {\r\n            //     ...state,\r\n            // 맨 앞에 dummyPost추가해야 맨 위에 게시글 올라간다.\r\n            // sagas의 post에서 넘어온 게시글 action.data\r\n            // mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n            //     addPostLoading: true,\r\n            //     addPostDone: true,\r\n            // }\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = true;\r\n                // 앞에서 dummyPost추가해야 맨 위\r\n                // sagas의 post에서 넘어온 게시글 action.data\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // action.data.content, postId, userId가 action.data에 들어있는 상태\r\n                // 불변성을 지키는 코드 (immer 라이브러리 사용하면 더 간단하게 가능)\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments]\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     // 앞에서 dummyPost추가해야 맨 위\r\n                //     mainPosts: [dummyPost, ...state.mainPosts],\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: true,\r\n                // }\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}