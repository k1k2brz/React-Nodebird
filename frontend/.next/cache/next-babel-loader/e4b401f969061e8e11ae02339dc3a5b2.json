{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\TaeIl\\\\Desktop\\\\frontStudy\\\\React-Nodebird\\\\frontend\\\\pages\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Next.js는 import React from 'react' 구문이 필요없음\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from \"../components/AppLayout\";\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nvar Home = function Home() {\n  _s();\n  var dispatch = useDispatch();\n  var _useSelector = useSelector(function (state) {\n      return state.user;\n    }),\n    me = _useSelector.me;\n  var _useSelector2 = useSelector(function (state) {\n      return state.post;\n    }),\n    mainPosts = _useSelector2.mainPosts,\n    hasMorePosts = _useSelector2.hasMorePosts,\n    loadPostsLoading = _useSelector2.loadPostsLoading,\n    retweetError = _useSelector2.retweetError;\n\n  // 리렌더링 에러로 상위에 올린 것\n  useEffect(function () {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(function () {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }, []);\n  useEffect(function () {\n    function onScroll() {\n      // scrollY: 얼마나 내렸는지, clientHeight: 화면 보이는 길이, scrollHeight: 총 길이\n      // scrollY + clientHeight해서 끝까지 내렸는지 확인 가능\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        // 로딩중에도 실행 안되게 막아준다. (Throttle만으로는 request여러번 가는 것 까지 못 막기 때문)\n        // 만약 모바일로 수천번 무한스크롤 게시글을 로딩한다면 메모리가 터져버릴 수 있기 때문에\n        // react-virtualized를 사용하면 좋다. (구현해볼것)\n        if (hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            data: mainPosts[mainPosts.length - 1].id\n          });\n        }\n      }\n    }\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return (\n    // 다른 컴포넌트로 감싸줄 경우 다른 컴포넌트 사용 가능\n    __jsx(AppLayout, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }, me && __jsx(PostForm, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 14\n      }\n    }), mainPosts.map(function (post) {\n      return __jsx(PostCard, {\n        key: post.id,\n        post: post,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 37\n        }\n      });\n    }))\n  );\n};\n_s(Home, \"M7SHTP4YiXnbjEK95DY+3hRbFs4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useDispatch","useSelector","AppLayout","PostCard","PostForm","LOAD_POSTS_REQUEST","LOAD_USER_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePosts","loadPostsLoading","retweetError","alert","type","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","data","length","id","addEventListener","removeEventListener","map"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/pages/index.tsx"],"sourcesContent":["// Next.js는 import React from 'react' 구문이 필요없음\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostCard from '../components/PostCard';\r\nimport PostForm from '../components/PostForm';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state: any) => state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state: any) => state.post);\r\n\r\n  // 리렌더링 에러로 상위에 올린 것\r\n  useEffect(() => {\r\n    if (retweetError) {\r\n      alert(retweetError)\r\n    }\r\n  }, [retweetError])\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_USER_REQUEST,\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      // scrollY: 얼마나 내렸는지, clientHeight: 화면 보이는 길이, scrollHeight: 총 길이\r\n      // scrollY + clientHeight해서 끝까지 내렸는지 확인 가능\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n        // 로딩중에도 실행 안되게 막아준다. (Throttle만으로는 request여러번 가는 것 까지 못 막기 때문)\r\n        // 만약 모바일로 수천번 무한스크롤 게시글을 로딩한다면 메모리가 터져버릴 수 있기 때문에\r\n        // react-virtualized를 사용하면 좋다. (구현해볼것)\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            data: mainPosts[mainPosts.length - 1].id,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n  return (\r\n    // 다른 컴포넌트로 감싸줄 경우 다른 컴포넌트 사용 가능\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post: any) => <PostCard key={post.id} post={post} />)}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;;;;AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,iBAAiB,QAAQ,kBAAkB;AAEpD,IAAMC,IAAI,GAAG,SAAPA,IAAI,GAAS;EAAA;EACjB,IAAMC,QAAQ,GAAGR,WAAW,EAAE;EAC9B,mBAAeC,WAAW,CAAC,UAACQ,KAAU;MAAA,OAAKA,KAAK,CAACC,IAAI;IAAA,EAAC;IAA9CC,EAAE,gBAAFA,EAAE;EACV,oBAAoEV,WAAW,CAAC,UAACQ,KAAU;MAAA,OAAKA,KAAK,CAACG,IAAI;IAAA,EAAC;IAAnGC,SAAS,iBAATA,SAAS;IAAEC,YAAY,iBAAZA,YAAY;IAAEC,gBAAgB,iBAAhBA,gBAAgB;IAAEC,YAAY,iBAAZA,YAAY;;EAE/D;EACAjB,SAAS,CAAC,YAAM;IACd,IAAIiB,YAAY,EAAE;MAChBC,KAAK,CAACD,YAAY,CAAC;IACrB;EACF,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElBjB,SAAS,CAAC,YAAM;IACdS,QAAQ,CAAC;MACPU,IAAI,EAAEb;IACR,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAENN,SAAS,CAAC,YAAM;IACdS,QAAQ,CAAC;MACPU,IAAI,EAAEZ;IACR,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAENP,SAAS,CAAC,YAAM;IACd,SAASoB,QAAQ,GAAG;MAClB;MACA;MACA,IAAIC,MAAM,CAACC,OAAO,GAAGC,QAAQ,CAACC,eAAe,CAACC,YAAY,GAAGF,QAAQ,CAACC,eAAe,CAACE,YAAY,GAAG,GAAG,EAAE;QACxG;QACA;QACA;QACA,IAAIX,YAAY,IAAI,CAACC,gBAAgB,EAAE;UACrCP,QAAQ,CAAC;YACPU,IAAI,EAAEb,kBAAkB;YACxBqB,IAAI,EAAEb,SAAS,CAACA,SAAS,CAACc,MAAM,GAAG,CAAC,CAAC,CAACC;UACxC,CAAC,CAAC;QACJ;MACF;IACF;IACAR,MAAM,CAACS,gBAAgB,CAAC,QAAQ,EAAEV,QAAQ,CAAC;IAC3C,OAAO,YAAM;MACXC,MAAM,CAACU,mBAAmB,CAAC,QAAQ,EAAEX,QAAQ,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAACN,SAAS,EAAEC,YAAY,EAAEC,gBAAgB,CAAC,CAAC;EAE/C;IACE;IACA,MAAC,SAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACPJ,EAAE,IAAI,MAAC,QAAQ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,EAClBE,SAAS,CAACkB,GAAG,CAAC,UAACnB,IAAS;MAAA,OAAK,MAAC,QAAQ;QAAC,GAAG,EAAEA,IAAI,CAACgB,EAAG;QAAC,IAAI,EAAEhB,IAAK;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG;IAAA,EAAC;EAC3D;AAEhB,CAAC;AAAC,GArDIL,IAAI;EAAA,QACSP,WAAW,EACbC,WAAW,EAC0CA,WAAW;AAAA;AAAA,KAH3EM,IAAI;AAuDV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module"}