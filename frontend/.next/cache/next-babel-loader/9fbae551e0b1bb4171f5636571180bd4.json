{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TaeIl\\\\Desktop\\\\frontStudy\\\\React-Nodebird\\\\frontend\\\\pages\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Next.js는 import React from 'react' 구문이 필요없음\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport AppLayout from \"../components/AppLayout\";\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n\n  // 리렌더링 에러로 상위에 올린 것\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n\n  // useEffect(() => {\n  //   dispatch({\n  //     type: LOAD_POSTS_REQUEST,\n  //   });\n  // }, []);\n\n  // useEffect(() => {\n  //   dispatch({\n  //     type: LOAD_USER_REQUEST,\n  //   })\n  // }, [])\n\n  useEffect(() => {\n    function onScroll() {\n      // scrollY: 얼마나 내렸는지, clientHeight: 화면 보이는 길이, scrollHeight: 총 길이\n      // scrollY + clientHeight해서 끝까지 내렸는지 확인 가능\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        // 로딩중에도 실행 안되게 막아준다. (Throttle만으로는 request여러번 가는 것 까지 못 막기 때문)\n        // 만약 모바일로 수천번 무한스크롤 게시글을 로딩한다면 메모리가 터져버릴 수 있기 때문에\n        // react-virtualized를 사용하면 좋다. (구현해볼것)\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n          // 마지막 게시글의 id // &&와 같음\n          // 주소창 쿼리 스트링이 없을 경우 대비\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return (\n    // 다른 컴포넌트로 감싸줄 경우 다른 컴포넌트 사용 가능\n    __jsx(AppLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }, me && __jsx(PostForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 14\n      }\n    }), mainPosts.map(post => __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 37\n      }\n    })))\n  );\n};\n\n// Next js\n// 홈 보다 먼저 실행된다.\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(context);\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST\n  });\n  // Next - redux 사용방법\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  // 실행된 결과 HYDRATE로 보낸다 (reducer index)\n});\n\nexport default Home;","map":{"version":3,"names":["useEffect","useDispatch","useSelector","END","AppLayout","PostCard","PostForm","LOAD_POSTS_REQUEST","LOAD_USER_REQUEST","wrapper","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","post","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","getServerSideProps","context","console","log","store","sagaTask","toPromise"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/pages/index.tsx"],"sourcesContent":["// Next.js는 import React from 'react' 구문이 필요없음\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\n\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostCard from '../components/PostCard';\r\nimport PostForm from '../components/PostForm';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state: any) => state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state: any) => state.post);\r\n\r\n  // 리렌더링 에러로 상위에 올린 것\r\n  useEffect(() => {\r\n    if (retweetError) {\r\n      alert(retweetError)\r\n    }\r\n  }, [retweetError])\r\n\r\n  // useEffect(() => {\r\n  //   dispatch({\r\n  //     type: LOAD_POSTS_REQUEST,\r\n  //   });\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   dispatch({\r\n  //     type: LOAD_USER_REQUEST,\r\n  //   })\r\n  // }, [])\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      // scrollY: 얼마나 내렸는지, clientHeight: 화면 보이는 길이, scrollHeight: 총 길이\r\n      // scrollY + clientHeight해서 끝까지 내렸는지 확인 가능\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n        // 로딩중에도 실행 안되게 막아준다. (Throttle만으로는 request여러번 가는 것 까지 못 막기 때문)\r\n        // 만약 모바일로 수천번 무한스크롤 게시글을 로딩한다면 메모리가 터져버릴 수 있기 때문에\r\n        // react-virtualized를 사용하면 좋다. (구현해볼것)\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          // 마지막 게시글의 id // &&와 같음\r\n          // 주소창 쿼리 스트링이 없을 경우 대비\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            lastId,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n  return (\r\n    // 다른 컴포넌트로 감싸줄 경우 다른 컴포넌트 사용 가능\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post: any) => <PostCard key={post.id} post={post} />)}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\n// Next js\r\n// 홈 보다 먼저 실행된다.\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  console.log(context)\r\n  context.store.dispatch({\r\n    type: LOAD_POSTS_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_USER_REQUEST,\r\n  });\r\n  // Next - redux 사용방법\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n  // 실행된 결과 HYDRATE로 보낸다 (reducer index)\r\n})\r\n\r\n\r\nexport default Home;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}