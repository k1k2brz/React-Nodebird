{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\TaeIl\\\\Desktop\\\\frontStudy\\\\React-Nodebird\\\\frontend\\\\pages\\\\about.tsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Head from 'next/head';\nimport { Avatar, Card } from 'antd';\nimport AppLayout from '../components/AppLayout';\nvar Profile = function Profile() {\n  _s();\n  var _useSelector = useSelector(function (state) {\n      return state.user;\n    }),\n    userInfo = _useSelector.userInfo;\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  }, \"\\uB0B4 \\uC815\\uBCF4 | NodeBird\")), userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 29\n      }\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 33\n      }\n    }), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 29\n      }\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 33\n      }\n    }), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 29\n      }\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 33\n      }\n    }), userInfo.Followers)],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 37\n      }\n    }, userInfo.nickname[0]),\n    title: userInfo.nickname,\n    description: \"\\uB178\\uB4DC\\uBC84\\uB4DC \\uB9E4\\uB2C8\\uC544\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  })) : null);\n};\n\n// 언제 접속해서 데이터가 바뀔 일이 없다면 - getStaticProps (블로그 글 같은)\n// build를 할 때 그 때 미리 SSR해서 HTML로 만들어 사람들이 방문하면 HTML을 제공한다.\n_s(Profile, \"tm9u9ATcYNEYVCp8P5F3TqiqzZ4=\", false, function () {\n  return [useSelector];\n});\n_c = Profile;\nexport var __N_SSG = true;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useSelector","Head","Avatar","Card","AppLayout","Profile","state","user","userInfo","Posts","Followings","Followers","nickname"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/pages/about.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Head from 'next/head';\r\nimport { END } from 'redux-saga';\r\n\r\nimport { Avatar, Card } from 'antd';\r\nimport AppLayout from '../components/AppLayout';\r\nimport wrapper from '../store/configureStore';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst Profile = () => {\r\n    const { userInfo } = useSelector((state: any) => state.user);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <Head>\r\n                <title>내 정보 | NodeBird</title>\r\n            </Head>\r\n            {userInfo\r\n                ? (\r\n                    <Card\r\n                        actions={[\r\n                            <div key=\"twit\">\r\n                                짹짹\r\n                                <br />\r\n                                {userInfo.Posts}\r\n                            </div>,\r\n                            <div key=\"following\">\r\n                                팔로잉\r\n                                <br />\r\n                                {userInfo.Followings}\r\n                            </div>,\r\n                            <div key=\"follower\">\r\n                                팔로워\r\n                                <br />\r\n                                {userInfo.Followers}\r\n                            </div>,\r\n                        ]}\r\n                    >\r\n                        <Card.Meta\r\n                            avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n                            title={userInfo.nickname}\r\n                            description=\"노드버드 매니아\"\r\n                        />\r\n                    </Card>\r\n                )\r\n                : null}\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\n// 언제 접속해서 데이터가 바뀔 일이 없다면 - getStaticProps (블로그 글 같은)\r\n// build를 할 때 그 때 미리 SSR해서 HTML로 만들어 사람들이 방문하면 HTML을 제공한다.\r\nexport const getStaticProps = wrapper.getStaticProps((store): any => async ({ req }) => {\r\n    console.log('getStaticProps');\r\n    store.dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n        data: 1,\r\n    });\r\n    store.dispatch(END);\r\n    await store.sagaTask.toPromise();\r\n    // 실행된 결과 HYDRATE로 보낸다 (reducer index)\r\n})\r\n\r\nexport default Profile;"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,IAAI,MAAM,WAAW;AAG5B,SAASC,MAAM,EAAEC,IAAI,QAAQ,MAAM;AACnC,OAAOC,SAAS,MAAM,yBAAyB;AAI/C,IAAMC,OAAO,GAAG,SAAVA,OAAO,GAAS;EAAA;EAClB,mBAAqBL,WAAW,CAAC,UAACM,KAAU;MAAA,OAAKA,KAAK,CAACC,IAAI;IAAA,EAAC;IAApDC,QAAQ,gBAARA,QAAQ;EAEhB,OACI,MAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACN,MAAC,IAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,oCAA8B,CAC3B,EACNA,QAAQ,GAED,MAAC,IAAI;IACD,OAAO,EAAE,CACL;MAAK,GAAG,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,mBAEX;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAM,EACLA,QAAQ,CAACC,KAAK,CACb,EACN;MAAK,GAAG,EAAC,WAAW;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,yBAEhB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAM,EACLD,QAAQ,CAACE,UAAU,CAClB,EACN;MAAK,GAAG,EAAC,UAAU;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,yBAEf;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAM,EACLF,QAAQ,CAACG,SAAS,CACjB,CACR;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEF,MAAC,IAAI,CAAC,IAAI;IACN,MAAM,EAAE,MAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAEH,QAAQ,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAW;IAChD,KAAK,EAAEJ,QAAQ,CAACI,QAAS;IACzB,WAAW,EAAC,6CAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACxB,CACC,GAET,IAAI,CACF;AAEpB,CAAC;;AAED;AACA;AAAA,GA1CMP,OAAO;EAAA,QACYL,WAAW;AAAA;AAAA,KAD9BK,OAAO;AAAA;AAsDb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module"}