{"ast":null,"code":"import produce from 'immer';\n// import shortId from 'shortid';\n// import { faker } from '@faker-js/faker';\n\nexport const initialState = {\n  //     {\n  //     id: 1,\n  //     User: {\n  //         id: 1,\n  //         nickname: 'TaeIl'\n  //     },\n  //     content: '첫 번째 게시글 #해시태그 #익스프레스',\n  //     Images: [{\n  //         id: shortId.generate(),\n  //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n  //     }, {\n  //         id: shortId.generate(),\n  //         src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n  //     }, {\n  //         id: shortId.generate(),\n  //         src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n  //     }],\n  //     // 대문자는 서버에서 주는 애들\n  //     Comments: [{\n  //         id: shortId.generate(),\n  //         User: {\n  //             id: shortId.generate(),\n  //             nickname: 'nero',\n  //         },\n  //         content: '우와 개정판이 나왔군요~',\n  //     }, {\n  //         id: shortId.generate(),\n  //         User: {\n  //             id: shortId.generate(),\n  //             nickname: 'hero',\n  //         },\n  //         content: '얼른 사고싶어요~',\n  //     }]\n  // }\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  // infinite scroll\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null\n};\n\n// infinite scrolling\n// export const generateDummyPost = (number) => Array(number).fill(undefined).map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.internet.userName(),\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.internet.userName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\n// 변수로 지정해주면 편하다\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\n\n// 화면 로딩하면\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n// 동기 액션은 하나만 만들면 된다\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\n\n// 동적 액션 크리에이터\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\n// const dummyPost = (data) => ({\n//     // shortId를 넣으면 더미데이터 Encountered two children with the same key에러는 해결이 되지만\n//     // Failed prop type에러가 뜬다. 나중에 실제 데이터 넣어서 해결해야 할 듯\n//     id: data.id,\n//     // 게시글\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Violet',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n\n// const dummyComment = (data) => ({ // 더미 코멘트\n//     id: shortId.generate(),\n//     content: data,\n//     User: {\n//         id: 1,\n//         nickname: 'Violet',\n//     },\n// });\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  // 불변성을 지키면서 코드 작성하는게 어려우니까 도와주는 라이브러리 immer\n  // immer 사용\n  return produce(state, draft => {\n    switch (action.type) {\n      // 서버에서 이미지를 지우고 싶으면 비동기로 만들어줘야 한다.\n      // 서버에서 이미지를 안지우는 이유는 머신러닝 등을 위해 데이터 수집을 할 수도 있어서\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          // 데이터들 여기 저장\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n      // return {\n      //     ...state,\n      // 맨 앞에 dummyPost추가해야 맨 위에 게시글 올라간다.\n      // sagas의 post에서 넘어온 게시글 action.data\n      // mainPosts: [dummyPost(action.data), ...state.mainPosts],\n      //     addPostLoading: true,\n      //     addPostDone: true,\n      // }\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        // 앞에서 dummyPost추가해야 맨 위\n        // sagas의 post에서 넘어온 게시글 action.data\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          // action.data.content, postId, userId가 action.data에 들어있는 상태\n          // 불변성을 지키는 코드 (immer 라이브러리 사용하면 더 간단하게 가능)\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments]\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     // 앞에서 dummyPost추가해야 맨 위\n          //     mainPosts: [dummyPost, ...state.mainPosts],\n          //     addCommentLoading: true,\n          //     addCommentDone: true,\n          // }\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","filter","v","i","error","post","find","id","PostId","Likers","push","UserId","concat","length","unshift","Comments"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/reducers/post.tsx"],"sourcesContent":["import produce from 'immer';\r\n// import shortId from 'shortid';\r\n// import { faker } from '@faker-js/faker';\r\n\r\nexport type mainPost = {\r\n    mainPosts: any,\r\n    imagePaths: object[],\r\n    likePostLoading: boolean,\r\n    likePostDone: boolean,\r\n    likePostError: boolean,\r\n    unlikePostLoading: boolean,\r\n    unlikePostDone: boolean,\r\n    unlikePostError: boolean,\r\n    addPostLoading: boolean,\r\n    addPostDone: boolean,\r\n    addPostError: boolean,\r\n    addCommentLoading: boolean,\r\n    addCommentDone: boolean,\r\n    addCommentError: boolean,\r\n    hasMorePosts: boolean,\r\n    loadPostsLoading: boolean,\r\n    loadPostsDone: boolean,\r\n    loadPostsError: boolean,\r\n    removePostLoading: boolean,\r\n    removePostDone: boolean,\r\n    removePostError: boolean,\r\n    uploadImagesLoading: boolean,\r\n    uploadImagesDone: boolean,\r\n    uploadImagesError: boolean,\r\n}\r\n\r\nexport const initialState: mainPost = {\r\n    //     {\r\n    //     id: 1,\r\n    //     User: {\r\n    //         id: 1,\r\n    //         nickname: 'TaeIl'\r\n    //     },\r\n    //     content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n    //     Images: [{\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n    //     }],\r\n    //     // 대문자는 서버에서 주는 애들\r\n    //     Comments: [{\r\n    //         id: shortId.generate(),\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: 'nero',\r\n    //         },\r\n    //         content: '우와 개정판이 나왔군요~',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: 'hero',\r\n    //         },\r\n    //         content: '얼른 사고싶어요~',\r\n    //     }]\r\n    // }\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true, // infinite scroll\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n}\r\n\r\n// infinite scrolling\r\n// export const generateDummyPost = (number) => Array(number).fill(undefined).map(() => ({\r\n//     id: shortId.generate(),\r\n//     User: {\r\n//         id: shortId.generate(),\r\n//         nickname: faker.internet.userName(),\r\n//     },\r\n//     content: faker.lorem.paragraph(),\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     }],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: shortId.generate(),\r\n//             nickname: faker.internet.userName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }));\r\n\r\n\r\n// 변수로 지정해주면 편하다\r\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\r\n\r\n// 화면 로딩하면\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST' as const;\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS' as const;\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE' as const;\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST' as const;\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS' as const;\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE' as const;\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST' as const;\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS' as const;\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE' as const;\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST' as const;\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS' as const;\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE' as const;\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST' as const;\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS' as const;\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE' as const;\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST' as const;\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS' as const;\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE' as const;\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST' as const;\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS' as const;\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE' as const;\r\n\r\n// 동기 액션은 하나만 만들면 된다\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE' as const;\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\n\r\n// 동적 액션 크리에이터\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\n// const dummyPost = (data) => ({\r\n//     // shortId를 넣으면 더미데이터 Encountered two children with the same key에러는 해결이 되지만\r\n//     // Failed prop type에러가 뜬다. 나중에 실제 데이터 넣어서 해결해야 할 듯\r\n//     id: data.id,\r\n//     // 게시글\r\n//     content: data.content,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'Violet',\r\n//     },\r\n//     Images: [],\r\n//     Comments: [],\r\n// });\r\n\r\n// const dummyComment = (data) => ({ // 더미 코멘트\r\n//     id: shortId.generate(),\r\n//     content: data,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'Violet',\r\n//     },\r\n// });\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state: mainPost = initialState, action: any) => {\r\n    // 불변성을 지키면서 코드 작성하는게 어려우니까 도와주는 라이브러리 immer\r\n    // immer 사용\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            // 서버에서 이미지를 지우고 싶으면 비동기로 만들어줘야 한다.\r\n            // 서버에서 이미지를 안지우는 이유는 머신러닝 등을 위해 데이터 수집을 할 수도 있어서\r\n            case REMOVE_IMAGE:\r\n                draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data)\r\n                break;\r\n            case UPLOAD_IMAGES_REQUEST:\r\n                draft.uploadImagesLoading = true;\r\n                draft.uploadImagesDone = false;\r\n                draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS: {\r\n                // 데이터들 여기 저장\r\n                draft.imagePaths = action.data;\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesDone = true;\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGES_FAILURE:\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesError = action.error;\r\n                break;\r\n            case LIKE_POST_REQUEST:\r\n                draft.likePostLoading = true;\r\n                draft.likePostDone = false;\r\n                draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers.push({ id: action.data.UserId });\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone = true;\r\n                break;\r\n            }\r\n            case LIKE_POST_FAILURE:\r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.error;\r\n                break;\r\n            case UNLIKE_POST_REQUEST:\r\n                draft.unlikePostLoading = true;\r\n                draft.unlikePostDone = false;\r\n                draft.unlikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostDone = true;\r\n                break;\r\n            }\r\n            case UNLIKE_POST_FAILURE:\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostError = action.error;\r\n                break;\r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = draft.mainPosts.concat(action.data);\r\n                draft.hasMorePosts = action.data.length === 10;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(action.data);\r\n                draft.imagePaths = [];\r\n                break;\r\n            // return {\r\n            //     ...state,\r\n            // 맨 앞에 dummyPost추가해야 맨 위에 게시글 올라간다.\r\n            // sagas의 post에서 넘어온 게시글 action.data\r\n            // mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n            //     addPostLoading: true,\r\n            //     addPostDone: true,\r\n            // }\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                // 앞에서 dummyPost추가해야 맨 위\r\n                // sagas의 post에서 넘어온 게시글 action.data\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // action.data.content, postId, userId가 action.data에 들어있는 상태\r\n                // 불변성을 지키는 코드 (immer 라이브러리 사용하면 더 간단하게 가능)\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments]\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     // 앞에서 dummyPost추가해야 맨 위\r\n                //     mainPosts: [dummyPost, ...state.mainPosts],\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: true,\r\n                // }\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}