{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(retweet),\n  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(uploadImages),\n  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(likePost),\n  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(unlikePost),\n  _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(loadPost),\n  _marked6 = /*#__PURE__*/_regeneratorRuntime().mark(loadHashtagPosts),\n  _marked7 = /*#__PURE__*/_regeneratorRuntime().mark(loadUserPosts),\n  _marked8 = /*#__PURE__*/_regeneratorRuntime().mark(loadPosts),\n  _marked9 = /*#__PURE__*/_regeneratorRuntime().mark(addPost),\n  _marked10 = /*#__PURE__*/_regeneratorRuntime().mark(removePost),\n  _marked11 = /*#__PURE__*/_regeneratorRuntime().mark(addComment),\n  _marked12 = /*#__PURE__*/_regeneratorRuntime().mark(watchRetweet),\n  _marked13 = /*#__PURE__*/_regeneratorRuntime().mark(watchUploadImages),\n  _marked14 = /*#__PURE__*/_regeneratorRuntime().mark(watchLikePost),\n  _marked15 = /*#__PURE__*/_regeneratorRuntime().mark(watchUnlikePost),\n  _marked16 = /*#__PURE__*/_regeneratorRuntime().mark(watchLoadPost),\n  _marked17 = /*#__PURE__*/_regeneratorRuntime().mark(watchLoadHashtagPosts),\n  _marked18 = /*#__PURE__*/_regeneratorRuntime().mark(watchLoadUserPosts),\n  _marked19 = /*#__PURE__*/_regeneratorRuntime().mark(watchLoadPosts),\n  _marked20 = /*#__PURE__*/_regeneratorRuntime().mark(watchAddPost),\n  _marked21 = /*#__PURE__*/_regeneratorRuntime().mark(watchRemovePost),\n  _marked22 = /*#__PURE__*/_regeneratorRuntime().mark(watchAddComment),\n  _marked23 = /*#__PURE__*/_regeneratorRuntime().mark(postSaga);\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\n// import shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nfunction retweetAPI(data) {\n  // formData는 { data }이런식으로 감싸버리면 json이 되니까 {}적지 말 것\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function retweet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(retweetAPI, action.data);\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n        case 6:\n          _context.next = 13;\n          break;\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context.t0.response.data\n          });\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\nfunction uploadImagesAPI(data) {\n  // formData는 { data }이런식으로 감싸버리면 json이 되니까 {}적지 말 것\n  return axios.post('/post/images', data);\n}\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function uploadImages$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(uploadImagesAPI, action.data);\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n        case 6:\n          _context2.next = 13;\n          break;\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context2.t0.response.data\n          });\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\nfunction likePostAPI(data) {\n  // data가 ${}안에 들어가기 때문에 굳이 안넣어도 됨\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function likePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(likePostAPI, action.data);\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n        case 6:\n          _context3.next = 13;\n          break;\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function unlikePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(unlikePostAPI, action.data);\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n        case 6:\n          _context4.next = 13;\n          break;\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\nfunction loadPostAPI(data) {\n  return axios.get(\"/post/\".concat(data));\n}\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function loadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadPostAPI, action.data);\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n        case 6:\n          _context5.next = 13;\n          break;\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            data: _context5.t0.response.data\n          });\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\nfunction loadHashtagPostsAPI(data, lastId) {\n  // encodeURIComponent - 주소창에 한글 들어가서 에러나는거 방지\n  // 나중에 decodeURIComponent 하면 원래대로 돌아온다.\n  console.log(data, lastId);\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(data), \"?lastId=\").concat(lastId || 0));\n}\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function loadHashtagPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n        case 6:\n          _context6.next = 13;\n          break;\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            data: _context6.t0.response.data\n          });\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(\"/user/\".concat(data, \"/posts?lastId=\").concat(lastId || 0));\n}\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function loadUserPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserPostsAPI, action.data, action.lastId);\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n        case 6:\n          _context7.next = 13;\n          break;\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context7.t0.response.data\n          });\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\nfunction loadPostsAPI(lastId) {\n  // get의 두번째 자리는 withcredentials\n  // GET 쿼리 스트링으로 주소에 데이터 포함시키는 방법 (주소 캐싱)\n  // 주소창 쿼리 스트링이 없으면 0\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0));\n}\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function loadPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(loadPostsAPI, action.lastId);\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n            // data: generateDummyPost(10), // reducer에서 만든 함수\n          });\n        case 6:\n          _context8.next = 13;\n          break;\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context8.t0.response.data\n          });\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\nfunction addPostAPI(data) {\n  // 2번째 자리에 req.body.content로 받을 수 있도록 { content: data }처럼 이름을 붙여줄 수 있다.\n  return axios.post('/post', data);\n}\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function addPost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(addPostAPI, action.data);\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n            // action.data에 작성한 글이 들어있음 (더미데이터)\n            // data: {\n            //     id,\n            //     content: action.data,\n            // }\n          });\n        case 6:\n          _context9.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n        case 8:\n          _context9.next = 15;\n          break;\n        case 10:\n          _context9.prev = 10;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context9.t0.response.data\n          });\n        case 15:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 10]]);\n}\nfunction removePostAPI(data) {\n  // delete는 2번째 자리에 data 못 넣는다\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function removePost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(removePostAPI, action.data);\n        case 3:\n          result = _context10.sent;\n          _context10.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            // action.data에 작성한 글이 들어있음\n            data: result.data\n          });\n        case 6:\n          _context10.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n        case 8:\n          _context10.next = 15;\n          break;\n        case 10:\n          _context10.prev = 10;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error(_context10.t0);\n          _context10.next = 15;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context10.t0.response.data\n          });\n        case 15:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 10]]);\n}\nfunction addCommentAPI(data) {\n  /** 쿠키를 같이 전달 해준다 (도메인이 다르면 쿠키도 전달이 안되니까 backend의 cors와 여기)\r\n   withCredentials: true로 쿠키전달 허용\r\n   */\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); // POST /post/1/comment\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function addComment$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(addCommentAPI, action.data);\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n        case 6:\n          _context11.next = 13;\n          break;\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context11.t0.response.data\n          });\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\nfunction watchRetweet() {\n  return _regeneratorRuntime().wrap(function watchRetweet$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\nfunction watchUploadImages() {\n  return _regeneratorRuntime().wrap(function watchUploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\nfunction watchLikePost() {\n  return _regeneratorRuntime().wrap(function watchLikePost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\nfunction watchUnlikePost() {\n  return _regeneratorRuntime().wrap(function watchUnlikePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\nfunction watchLoadPost() {\n  return _regeneratorRuntime().wrap(function watchLoadPost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime().wrap(function watchLoadHashtagPosts$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime().wrap(function watchLoadUserPosts$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\nfunction watchLoadPosts() {\n  return _regeneratorRuntime().wrap(function watchLoadPosts$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\nfunction watchAddPost() {\n  return _regeneratorRuntime().wrap(function watchAddPost$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\nfunction watchRemovePost() {\n  return _regeneratorRuntime().wrap(function watchRemovePost$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}\nfunction watchAddComment() {\n  return _regeneratorRuntime().wrap(function watchAddComment$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\nexport default function postSaga() {\n  return _regeneratorRuntime().wrap(function postSaga$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPosts),\n          // fork(watchUpdatePost),\n          fork(watchRemovePost), fork(watchAddComment)]);\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}","map":{"version":3,"names":["retweet","uploadImages","likePost","unlikePost","loadPost","loadHashtagPosts","loadUserPosts","loadPosts","addPost","removePost","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPost","watchLoadHashtagPosts","watchLoadUserPosts","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","fork","put","takeLatest","throttle","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","action","result","type","console","error","response","uploadImagesAPI","likePostAPI","patch","unlikePostAPI","loadPostAPI","get","loadHashtagPostsAPI","lastId","log","encodeURIComponent","loadUserPostsAPI","loadPostsAPI","addPostAPI","id","removePostAPI","addCommentAPI","postId"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/sagas/post.tsx"],"sourcesContent":["import { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n// import shortId from 'shortid';\r\nimport axios from 'axios';\r\nimport {\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,\r\n    LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS,\r\n    RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS,\r\n    UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction retweetAPI(data) {\r\n    // formData는 { data }이런식으로 감싸버리면 json이 되니까 {}적지 말 것\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    // formData는 { data }이런식으로 감싸버리면 json이 되니까 {}적지 말 것\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    // data가 ${}안에 들어가기 때문에 굳이 안넣어도 됨\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get(`/post/${data}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    // encodeURIComponent - 주소창에 한글 들어가서 에러나는거 방지\r\n    // 나중에 decodeURIComponent 하면 원래대로 돌아온다.\r\n    console.log(data, lastId)\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`)\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId)\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    // get의 두번째 자리는 withcredentials\r\n    // GET 쿼리 스트링으로 주소에 데이터 포함시키는 방법 (주소 캐싱)\r\n    // 주소창 쿼리 스트링이 없으면 0\r\n    return axios.get(`/posts?lastId=${lastId || 0}`)\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId)\r\n        // yield delay(1000);\r\n        // const id = shortId.generate();\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n            // data: generateDummyPost(10), // reducer에서 만든 함수\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    // 2번째 자리에 req.body.content로 받을 수 있도록 { content: data }처럼 이름을 붙여줄 수 있다.\r\n    return axios.post('/post', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data)\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n            // action.data에 작성한 글이 들어있음 (더미데이터)\r\n            // data: {\r\n            //     id,\r\n            //     content: action.data,\r\n            // }\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    // delete는 2번째 자리에 data 못 넣는다\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data)\r\n        // POST reducer 상태랑 user reducer상태랑 동시에 바꿀 수 없기 때문에 action이 2개가 나온다.\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // action.data에 작성한 글이 들어있음\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    /** 쿠키를 같이 전달 해준다 (도메인이 다르면 쿠키도 전달이 안되니까 backend의 cors와 여기)\r\n     withCredentials: true로 쿠키전달 허용\r\n     */\r\n    return axios.post(`/post/${data.postId}/comment`, data) // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    // 무한 스크롤 이벤 대량 발생 방지\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadPosts),\r\n        // fork(watchUpdatePost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}