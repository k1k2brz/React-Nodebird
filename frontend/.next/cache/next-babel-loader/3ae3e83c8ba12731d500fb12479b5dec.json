{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from '@reduxjs/toolkit';\n\n// const initialState = {\n//     name: 'taeil',\n//     age: 111,\n//     password: 'babo'\n// }\n\n// // 매번 새로 data를 만들 수 없기 때문에 동적으로 (action creator)\n// const changeNickname = (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// }\n// changeNickname('lee');\n\n// store.dispatch(changeNickname('nene'))\n\n// (이전상태, 액션) => 다음상태\n// combineReducers로 user, post 합쳐준다\nconst rootReducer = combineReducers({\n  // hydrate를 넣기 위해 index reducer 추가 (서버사이드 렌더링을 위해서)\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\n\n// // (이전상태, 액션) => 다음상태\n// const rootReducer = (state, action) => {\n//     // 전체를 덮어 씌울 수 있게 만들어주기 위해 바꾼 코드\n//     switch (action.type) {\n//         case HYDRATE:\n//             console.log('HYDTATE', action);\n//             return action.payload;\n//         default: {\n//             const combinedReducer = combineReducers({\n//                 user,\n//                 post,\n//             });\n//             return combinedReducer(state, action)\n//         }\n//     }\n// }\n\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","user","post","combineReducers","rootReducer","index","state","action","type","payload"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/reducers/index.tsx"],"sourcesContent":["import { HYDRATE } from 'next-redux-wrapper'\r\n\r\nimport user from './user';\r\nimport post from './post';\r\nimport { combineReducers } from '@reduxjs/toolkit';\r\n\r\n// const initialState = {\r\n//     name: 'taeil',\r\n//     age: 111,\r\n//     password: 'babo'\r\n// }\r\n\r\n// // 매번 새로 data를 만들 수 없기 때문에 동적으로 (action creator)\r\n// const changeNickname = (data) => {\r\n//     return {\r\n//         type: 'CHANGE_NICKNAME',\r\n//         data,\r\n//     }\r\n// }\r\n// changeNickname('lee');\r\n\r\n// store.dispatch(changeNickname('nene'))\r\n\r\n\r\n// (이전상태, 액션) => 다음상태\r\n// combineReducers로 user, post 합쳐준다\r\nconst rootReducer = combineReducers({\r\n    // hydrate를 넣기 위해 index reducer 추가 (서버사이드 렌더링을 위해서)\r\n    index: (state: Object = {}, action) => {\r\n        switch (action.type) {\r\n            case HYDRATE:\r\n                return { ...state, ...action.payload };\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    user,\r\n    post,\r\n})\r\n\r\n// // (이전상태, 액션) => 다음상태\r\n// const rootReducer = (state, action) => {\r\n//     // 전체를 덮어 씌울 수 있게 만들어주기 위해 바꾼 코드\r\n//     switch (action.type) {\r\n//         case HYDRATE:\r\n//             console.log('HYDTATE', action);\r\n//             return action.payload;\r\n//         default: {\r\n//             const combinedReducer = combineReducers({\r\n//                 user,\r\n//                 post,\r\n//             });\r\n//             return combinedReducer(state, action)\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default rootReducer;"],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAE5C,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,eAAe,QAAQ,kBAAkB;;AAElD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA,MAAMC,WAAW,GAAGD,eAAe,CAAC;EAChC;EACAE,KAAK,EAAE,CAACC,KAAa,GAAG,CAAC,CAAC,EAAEC,MAAM,KAAK;IACnC,QAAQA,MAAM,CAACC,IAAI;MACf,KAAKR,OAAO;QACR,uCAAYM,KAAK,GAAKC,MAAM,CAACE,OAAO;MACxC;QACI,OAAOH,KAAK;IAAC;EAEzB,CAAC;EACDL,IAAI;EACJC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeE,WAAW"},"metadata":{},"sourceType":"module"}