{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TaeIl\\\\Desktop\\\\frontStudy\\\\React-Nodebird\\\\frontend\\\\components\\\\PostForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Form, Input, Button } from 'antd';\nimport { useCallback, useRef, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\nconst PostForm = () => {\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const imageInput = useRef();\n  const [text, onChangeText, setText] = useInput('');\n  useEffect(() => {\n    if (addPostDone) {\n      // onSubmit에서 초기화 하면 에러 났을 때 게시글 작성된게 전부 날아감\n      setText('');\n    }\n  }, [addPostDone]);\n  const onSubmit = useCallback(() => {\n    // 게시글 없음\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      // req.body.image가 됨\n      formData.append('image', p);\n    });\n    // req.body.content가 됨\n    formData.append('content', text);\n    // dispatch자리에는 객체가 들어감\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n    // imageInput.current로 접근\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    console.log('images', e.target.files);\n    // FormData()를 사용하면 multipart형식으로 서버로 보냄\n    const imageFormData = new FormData();\n    // forEach 메서드가 이벤트에 없기 때문에 [].의 forEach메서드를 빌려쓰는 방식으로 작성\n    [].forEach.call(e.target.files, f => {\n      // key(라우터의 upload값과 일치해야함), 값\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  }, []);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: 'right'\n    },\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, imagePaths.map((v, i) => __jsx(\"div\", {\n    key: v,\n    style: {\n      display: 'inline-block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3065/${v}`,\n    style: {\n      width: '200px'\n    },\n    alt: v,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    onClick: onRemoveImage(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, \"\\uC81C\\uAC70\"))))));\n};\nexport default PostForm;","map":{"version":3,"names":["Form","Input","Button","useCallback","useRef","useEffect","useSelector","useDispatch","useInput","ADD_POST_REQUEST","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","PostForm","imagePaths","addPostDone","state","post","dispatch","imageInput","text","onChangeText","setText","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","data","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","onRemoveImage","index","margin","float","map","v","i","display","width"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/components/PostForm.tsx"],"sourcesContent":["import { Form, Input, Button } from 'antd';\r\nimport { useCallback, useRef, useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport useInput from '../hooks/useInput';\r\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n    const { imagePaths, addPostDone } = useSelector((state: any) => state.post);\r\n    const dispatch = useDispatch()\r\n    const imageInput = useRef();\r\n    const [text, onChangeText, setText] = useInput('')\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) {\r\n            // onSubmit에서 초기화 하면 에러 났을 때 게시글 작성된게 전부 날아감\r\n            setText('')\r\n        }\r\n    }, [addPostDone])\r\n\r\n    const onSubmit = useCallback(() => {\r\n        // 게시글 없음\r\n        if (!text || !text.trim()) {\r\n            return alert('게시글을 작성하세요.');\r\n        }\r\n        const formData = new FormData();\r\n        imagePaths.forEach((p) => {\r\n            // req.body.image가 됨\r\n            formData.append('image', p);\r\n        })\r\n        // req.body.content가 됨\r\n        formData.append('content', text);\r\n        // dispatch자리에는 객체가 들어감\r\n        return dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n    }, [text, imagePaths])\r\n\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n        // imageInput.current로 접근\r\n    }, [imageInput.current])\r\n\r\n    const onChangeImages = useCallback((e) => {\r\n        console.log('images', e.target.files);\r\n        // FormData()를 사용하면 multipart형식으로 서버로 보냄\r\n        const imageFormData = new FormData();\r\n        // forEach 메서드가 이벤트에 없기 때문에 [].의 forEach메서드를 빌려쓰는 방식으로 작성\r\n        [].forEach.call(e.target.files, (f) => {\r\n            // key(라우터의 upload값과 일치해야함), 값\r\n            imageFormData.append('image', f);\r\n        });\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData,\r\n        })\r\n    }, [])\r\n\r\n    const onRemoveImage = useCallback((index) => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGE,\r\n            data: index,\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <Form style={{ margin: '10px 0 20px' }} encType='multipart/form-data' onFinish={onSubmit}>\r\n            <Input.TextArea\r\n                value={text}\r\n                onChange={onChangeText}\r\n                maxLength={140}\r\n                placeholder=\"어떤 신기한 일이 있었나요?\"\r\n            />\r\n            <div>\r\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                {/* 2개 이상일시 fills */}\r\n                {/* <input type=\"file\" name=\"image2\" multiple hidden ref={imageInput} /> */}\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">짹짹</Button>\r\n            </div>\r\n            <div>\r\n                {/* map안에 콜백함수를 넣고싶으면 고차함수를 사용해야한다. */}\r\n                {imagePaths.map((v, i: number) => (\r\n                    <div key={v} style={{ display: 'inline-block' }}>\r\n                        {/* 3060으로 보내면 엑박 404 */}\r\n                        <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n                        <div>\r\n                            <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default PostForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}