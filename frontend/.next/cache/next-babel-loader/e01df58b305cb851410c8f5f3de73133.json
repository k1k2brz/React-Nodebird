{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'TaeIl'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n// 변수로 지정해주면 편하다\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\n\n// 동적 액션 크리에이터\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: 2,\n    // 게시글\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'Tae-'\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 앞에서 dummyPost추가해야 맨 위\n        // sagas의 post에서 넘어온 게시글 action.data\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: true,\n        addPostDone: true\n      });\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 앞에서 dummyPost추가해야 맨 위\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        addCommentLoading: true,\n        addCommentDone: true\n      });\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","reducer","state","action","error"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/reducers/post.tsx"],"sourcesContent":["import shortId from 'shortid';\r\n\r\ntype mainPost = {\r\n    mainPosts: object[],\r\n    imagePaths: object[],\r\n    addPostLoading: boolean,\r\n    addPostDone: boolean,\r\n    addPostError: boolean,\r\n    addCommentLoading: boolean,\r\n    addCommentDone: boolean,\r\n    addCommentError: boolean,\r\n}\r\n\r\nexport const initialState: mainPost = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: 'TaeIl'\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images: [{\r\n            src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n        }, {\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n        }, {\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n        }],\r\n        Comments: [{\r\n            User: {\r\n                nickname: 'nero',\r\n            },\r\n            content: '우와 개정판이 나왔군요~',\r\n        }, {\r\n            User: {\r\n                nickname: 'hero',\r\n            },\r\n            content: '얼른 사고싶어요~',\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n}\r\n// 변수로 지정해주면 편하다\r\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST' as const;\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS' as const;\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE' as const;\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST' as const;\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS' as const;\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE' as const;\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST' as const;\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS' as const;\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE' as const;\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST' as const;\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS' as const;\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE' as const;\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\n\r\n// 동적 액션 크리에이터\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n    id: 2,\r\n    // 게시글\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Tae-',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst reducer = (state: mainPost = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            }\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                // 앞에서 dummyPost추가해야 맨 위\r\n                // sagas의 post에서 넘어온 게시글 action.data\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                addPostLoading: true,\r\n                addPostDone: true,\r\n            }\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n            }\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            }\r\n        case ADD_COMMENT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                // 앞에서 dummyPost추가해야 맨 위\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                addCommentLoading: true,\r\n                addCommentDone: true,\r\n            }\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}