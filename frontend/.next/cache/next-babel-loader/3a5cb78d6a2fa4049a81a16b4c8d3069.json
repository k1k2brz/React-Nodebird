{"ast":null,"code":"import { all, fork, delay, put, takeEvery } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      // action.data에 작성한 글이 들어있음\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    // POST reducer 상태랑 user reducer상태랑 동시에 바꿀 수 없기 때문에 action이 2개가 나온다.\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      // action.data에 작성한 글이 들어있음\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  // return axios.post(`/api/post/${data.postId}/comment`, data)\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeEvery(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeEvery(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeEvery(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","delay","put","takeEvery","shortId","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","delete","removePost","addCommentAPI","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/sagas/post.tsx"],"sourcesContent":["import { all, fork, delay, put, takeEvery } from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport axios from 'axios';\r\nimport {\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            // action.data에 작성한 글이 들어있음\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            }\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(removePostAPI, action.data)\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        // POST reducer 상태랑 user reducer상태랑 동시에 바꿀 수 없기 때문에 action이 2개가 나온다.\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // action.data에 작성한 글이 들어있음\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            }\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: id,\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    // return axios.post(`/api/post/${data.postId}/comment`, data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // const result = yield call(addCommentAPI, action.data)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeEvery(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeEvery(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeEvery(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,SAAS,QAAQ,oBAAoB;AACrE,OAAOC,OAAO,MAAM,SAAS;AAC7B,OAAOC,KAAK,MAAM,OAAO;AACzB,SACIC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAC7DC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,QAChH,kBAAkB;AACzB,SAASC,cAAc,EAAEC,iBAAiB,QAAQ,kBAAkB;AAEpE,SAASC,UAAU,CAACC,IAAI,EAAE;EACtB,OAAOb,KAAK,CAACc,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACxC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACtB,IAAI;IACA;IACA,MAAMpB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMqB,EAAE,GAAGlB,OAAO,CAACmB,QAAQ,EAAE;IAC7B,MAAMrB,GAAG,CAAC;MACNsB,IAAI,EAAEb,gBAAgB;MACtB;MACAO,IAAI,EAAE;QACFI,EAAE;QACFG,OAAO,EAAEJ,MAAM,CAACH;MACpB;IACJ,CAAC,CAAC;IACF,MAAMhB,GAAG,CAAC;MACNsB,IAAI,EAAET,cAAc;MACpBG,IAAI,EAAEI;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOI,GAAG,EAAE;IACV,MAAMxB,GAAG,CAAC;MACNsB,IAAI,EAAEf,gBAAgB;MACtBS,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASU,aAAa,CAACV,IAAI,EAAE;EACzB,OAAOb,KAAK,CAACwB,MAAM,CAAC,WAAW,EAAEX,IAAI,CAAC;AAC1C;AAEA,UAAUY,UAAU,CAACT,MAAM,EAAE;EACzB,IAAI;IACA;IACA,MAAMpB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMqB,EAAE,GAAGlB,OAAO,CAACmB,QAAQ,EAAE;IAC7B;IACA,MAAMrB,GAAG,CAAC;MACNsB,IAAI,EAAEV,mBAAmB;MACzB;MACAI,IAAI,EAAE;QACFI,EAAE;QACFG,OAAO,EAAEJ,MAAM,CAACH;MACpB;IACJ,CAAC,CAAC;IACF,MAAMhB,GAAG,CAAC;MACNsB,IAAI,EAAER,iBAAiB;MACvBE,IAAI,EAAEI;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOI,GAAG,EAAE;IACV,MAAMxB,GAAG,CAAC;MACNsB,IAAI,EAAEZ,mBAAmB;MACzBM,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASa,aAAa,CAACb,IAAI,EAAE;EACzB;AACJ;AAEA,UAAUc,UAAU,CAACX,MAAM,EAAE;EACzB,IAAI;IACA;IACA,MAAMpB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMC,GAAG,CAAC;MACNsB,IAAI,EAAEhB,mBAAmB;MACzBU,IAAI,EAAEG,MAAM,CAACH;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACV,MAAMxB,GAAG,CAAC;MACNsB,IAAI,EAAElB,mBAAmB;MACzBY,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,UAAUe,YAAY,GAAG;EACrB,MAAM9B,SAAS,CAACO,gBAAgB,EAAEU,OAAO,CAAC;AAC9C;AAEA,UAAUc,eAAe,GAAG;EACxB,MAAM/B,SAAS,CAACU,mBAAmB,EAAEiB,UAAU,CAAC;AACpD;AAEA,UAAUK,eAAe,GAAG;EACxB,MAAMhC,SAAS,CAACI,mBAAmB,EAAEyB,UAAU,CAAC;AACpD;AAEA,eAAe,UAAUI,QAAQ,GAAG;EAChC,MAAMrC,GAAG,CAAC,CACNC,IAAI,CAACiC,YAAY,CAAC,EAClBjC,IAAI,CAACkC,eAAe,CAAC,EACrBlC,IAAI,CAACmC,eAAe,CAAC,CACxB,CAAC;AACN"},"metadata":{},"sourceType":"module"}