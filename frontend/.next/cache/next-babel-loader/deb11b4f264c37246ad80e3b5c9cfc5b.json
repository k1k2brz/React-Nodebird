{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport shortId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'TaeIl'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    // 대문자는 서버에서 주는 애들\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n// 변수로 지정해주면 편하다\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\n\n// 동적 액션 크리에이터\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: shortId.generate(),\n  // 게시글\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'Tae-'\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'Violet'\n  }\n});\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 앞에서 dummyPost추가해야 맨 위\n        // sagas의 post에서 넘어온 게시글 action.data\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: true,\n        addPostDone: true\n      });\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n    case ADD_COMMENT_SUCCESS:\n      {\n        // action.data.content, postId, userId가 action.data에 들어있는 상태\n        // 불변성을 지키는 코드\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // 앞에서 dummyPost추가해야 맨 위\n          mainPosts: [dummyPost, ...state.mainPosts],\n          addCommentLoading: true,\n          addCommentDone: true\n        });\n      }\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","postIndex","findIndex","v","postId","post"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/reducers/post.tsx"],"sourcesContent":["import shortId from 'shortid';\r\n\r\ntype mainPost = {\r\n    mainPosts: object[],\r\n    imagePaths: object[],\r\n    addPostLoading: boolean,\r\n    addPostDone: boolean,\r\n    addPostError: boolean,\r\n    addCommentLoading: boolean,\r\n    addCommentDone: boolean,\r\n    addCommentError: boolean,\r\n}\r\n\r\nexport const initialState: mainPost = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: 'TaeIl'\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images: [{\r\n            id: shortId.generate(),\r\n            src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n        }],\r\n        // 대문자는 서버에서 주는 애들\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'nero',\r\n            },\r\n            content: '우와 개정판이 나왔군요~',\r\n        }, {\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'hero',\r\n            },\r\n            content: '얼른 사고싶어요~',\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n}\r\n// 변수로 지정해주면 편하다\r\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST' as const;\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS' as const;\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE' as const;\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST' as const;\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS' as const;\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE' as const;\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST' as const;\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS' as const;\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE' as const;\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST' as const;\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS' as const;\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE' as const;\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\n\r\n// 동적 액션 크리에이터\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n    id: shortId.generate(),\r\n    // 게시글\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Tae-',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Violet',\r\n    },\r\n});\r\n\r\nconst reducer = (state: mainPost = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            }\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                // 앞에서 dummyPost추가해야 맨 위\r\n                // sagas의 post에서 넘어온 게시글 action.data\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                addPostLoading: true,\r\n                addPostDone: true,\r\n            }\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n            }\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            }\r\n        case ADD_COMMENT_SUCCESS: {\r\n            // action.data.content, postId, userId가 action.data에 들어있는 상태\r\n            // 불변성을 지키는 코드\r\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            const post = { ...state.mainPosts[postIndex] };\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments]\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = post;\r\n            return {\r\n                ...state,\r\n                // 앞에서 dummyPost추가해야 맨 위\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                addCommentLoading: true,\r\n                addCommentDone: true,\r\n            }\r\n        }\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}