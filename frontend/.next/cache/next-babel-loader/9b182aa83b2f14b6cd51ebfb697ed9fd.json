{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\TaeIl\\\\Desktop\\\\frontStudy\\\\React-Nodebird\\\\frontend\\\\components\\\\PostCard.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { EllipsisOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { Avatar, Button, Card, Popover } from 'antd';\nimport { useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport PropTypes from 'prop-types';\nvar PostCard = function PostCard(_ref) {\n  _s();\n  var post = _ref.post;\n  var id = useSelector(function (state) {\n    var _state$user$me;\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  // state.user.me && state.user.me.id 를 옵셔널 체이닝으로 줄여서\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 42\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }\n    }),\n    // liked\n    //     ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\n    //     : <HeartOutlined key=\"heart\" onClick={onToggleLike} />,\n    __jsx(MessageOutlined, {\n      key: \"message\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }\n    }),\n    // onClick={onToggleComment}\n    __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 29\n        }\n      }, id && post.UserId === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 45\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 45\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 39\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }\n    }))]\n    // extra={<FollowButton post={post} />}\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 29\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content\n    // <PostCardContent postData={post.content} />\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  })));\n};\n_s(PostCard, \"FJdoDJNyUlJ5WKWdRipc5DguCUQ=\", false, function () {\n  return [useSelector];\n});\n_c = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    UserId: PropTypes.number,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;\nvar _c;\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"names":["EllipsisOutlined","MessageOutlined","RetweetOutlined","Avatar","Button","Card","Popover","useSelector","PostImages","PropTypes","PostCard","post","id","state","user","me","marginBottom","Images","UserId","User","nickname","content","propTypes","shape","number","object","string","createdAt","Comments","arrayOf","any","isRequired"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/components/PostCard.tsx"],"sourcesContent":["import { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\r\nimport { Avatar, Button, Card, Popover } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\nimport PostImages from './PostImages';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const id = useSelector((state: any) => state.user.me?.id)\r\n    // state.user.me && state.user.me.id 를 옵셔널 체이닝으로 줄여서\r\n    return (\r\n        <div style={{ marginBottom: 20 }}>\r\n            {/* cover, actions는 antd기능 */}\r\n            {/* 배열 안에 jsx를 넣을 땐 key */}\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[\r\n                    <RetweetOutlined key=\"retweet\" />,\r\n                    // liked\r\n                    //     ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\r\n                    //     : <HeartOutlined key=\"heart\" onClick={onToggleLike} />,\r\n                    <MessageOutlined key=\"message\" />,\r\n                    // onClick={onToggleComment}\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={(\r\n                            <Button.Group>\r\n                                {id && post.UserId === id\r\n                                    ? (\r\n                                        <>\r\n                                            <Button>수정</Button>\r\n                                            <Button type=\"danger\">삭제</Button>\r\n                                            {/* loading={removePostLoading} onClick={onRemovePost} */}\r\n                                        </>\r\n                                    )\r\n                                    : <Button>신고</Button>}\r\n                            </Button.Group>\r\n                        )}\r\n                    >\r\n                        <EllipsisOutlined />\r\n                    </Popover>,\r\n                ]}\r\n            // extra={<FollowButton post={post} />}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={post.content}\r\n                // <PostCardContent postData={post.content} />\r\n                />\r\n            </Card>\r\n            {/* <CommentForm />\r\n            <Comments /> */}\r\n        </div >\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        UserId: PropTypes.number,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n        Comments: PropTypes.arrayOf(PropTypes.any),\r\n        Images: PropTypes.arrayOf(PropTypes.any),\r\n    }).isRequired,\r\n};\r\n\r\nexport default PostCard;"],"mappings":";;;;;AAAA,SAASA,gBAAgB,EAAiBC,eAAe,EAAEC,eAAe,QAAQ,mBAAmB;AACrG,SAASC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAEC,OAAO,QAAQ,MAAM;AACpD,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,SAAS,MAAM,YAAY;AAElC,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,OAAiB;EAAA;EAAA,IAAXC,IAAI,QAAJA,IAAI;EACpB,IAAMC,EAAE,GAAGL,WAAW,CAAC,UAACM,KAAU;IAAA;IAAA,yBAAKA,KAAK,CAACC,IAAI,CAACC,EAAE,mDAAb,eAAeH,EAAE;EAAA,EAAC;EACzD;EACA,OACI;IAAK,KAAK,EAAE;MAAEI,YAAY,EAAE;IAAG,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAG7B,MAAC,IAAI;IACD,KAAK,EAAEL,IAAI,CAACM,MAAM,CAAC,CAAC,CAAC,IAAI,MAAC,UAAU;MAAC,MAAM,EAAEN,IAAI,CAACM,MAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAI;IAC7D,OAAO,EAAE,CACL,MAAC,eAAe;MAAC,GAAG,EAAC,SAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;IACjC;IACA;IACA;IACA,MAAC,eAAe;MAAC,GAAG,EAAC,SAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;IACjC;IACA,MAAC,OAAO;MACJ,GAAG,EAAC,UAAU;MACd,OAAO,EACH,MAAC,MAAM,CAAC,KAAK;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACRL,EAAE,IAAID,IAAI,CAACO,MAAM,KAAKN,EAAE,GAEjB,4BACI,MAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,kBAAY,EACnB,MAAC,MAAM;QAAC,IAAI,EAAC,QAAQ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,kBAAY,CAElC,GAEL,MAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,kBAAY,CAE/B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEF,MAAC,gBAAgB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACd;IAElB;IAAA;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEI,MAAC,IAAI,CAAC,IAAI;IACN,MAAM,EAAE,MAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAED,IAAI,CAACQ,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAW;IACjD,KAAK,EAAET,IAAI,CAACQ,IAAI,CAACC,QAAS;IAC1B,WAAW,EAAET,IAAI,CAACU;IACtB;IAAA;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACE,CACC,CAGJ;AAEf,CAAC;AAAA,GAhDKX,QAAQ;EAAA,QACCH,WAAW;AAAA;AAAA,KADpBG,QAAQ;AAkDdA,QAAQ,CAACY,SAAS,GAAG;EACjBX,IAAI,EAAEF,SAAS,CAACc,KAAK,CAAC;IAClBX,EAAE,EAAEH,SAAS,CAACe,MAAM;IACpBL,IAAI,EAAEV,SAAS,CAACgB,MAAM;IACtBP,MAAM,EAAET,SAAS,CAACe,MAAM;IACxBH,OAAO,EAAEZ,SAAS,CAACiB,MAAM;IACzBC,SAAS,EAAElB,SAAS,CAACgB,MAAM;IAC3BG,QAAQ,EAAEnB,SAAS,CAACoB,OAAO,CAACpB,SAAS,CAACqB,GAAG,CAAC;IAC1Cb,MAAM,EAAER,SAAS,CAACoB,OAAO,CAACpB,SAAS,CAACqB,GAAG;EAC3C,CAAC,CAAC,CAACC;AACP,CAAC;AAED,eAAerB,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}