{"ast":null,"code":"import produce from 'immer';\n// import shortId from 'shortid';\n// import { faker } from '@faker-js/faker';\n\nexport const initialState = {\n  //     {\n  //     id: 1,\n  //     User: {\n  //         id: 1,\n  //         nickname: 'TaeIl'\n  //     },\n  //     content: '첫 번째 게시글 #해시태그 #익스프레스',\n  //     Images: [{\n  //         id: shortId.generate(),\n  //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n  //     }, {\n  //         id: shortId.generate(),\n  //         src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n  //     }, {\n  //         id: shortId.generate(),\n  //         src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n  //     }],\n  //     // 대문자는 서버에서 주는 애들\n  //     Comments: [{\n  //         id: shortId.generate(),\n  //         User: {\n  //             id: shortId.generate(),\n  //             nickname: 'nero',\n  //         },\n  //         content: '우와 개정판이 나왔군요~',\n  //     }, {\n  //         id: shortId.generate(),\n  //         User: {\n  //             id: shortId.generate(),\n  //             nickname: 'hero',\n  //         },\n  //         content: '얼른 사고싶어요~',\n  //     }]\n  // }\n  mainPosts: [],\n  singlePost: null,\n  imagePaths: [],\n  hasMorePosts: true,\n  // 무한 스크롤\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\n\n// infinite scrolling\n// export const generateDummyPost = (number) => Array(number).fill(undefined).map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.internet.userName(),\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.internet.userName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\n// 변수로 지정해주면 편하다\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\n\n// 화면 로딩하면\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\n// 동기 액션은 하나만 만들면 된다\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\n\n// 동적 액션 크리에이터\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\n// const dummyPost = (data) => ({\n//     // shortId를 넣으면 더미데이터 Encountered two children with the same key에러는 해결이 되지만\n//     // Failed prop type에러가 뜬다. 나중에 실제 데이터 넣어서 해결해야 할 듯\n//     id: data.id,\n//     // 게시글\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'Violet',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n\n// const dummyComment = (data) => ({ // 더미 코멘트\n//     id: shortId.generate(),\n//     content: data,\n//     User: {\n//         id: 1,\n//         nickname: 'Violet',\n//     },\n// });\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n    case RETWEET_SUCCESS:\n      {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.singlePost = action.data;\n      break;\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostError = action.error;\n      break;\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePosts = action.data.length === 10;\n      break;\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n  }\n});\nexport default reducer;","map":{"version":3,"names":["produce","initialState","mainPosts","singlePost","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","loadPostLoading","loadPostDone","loadPostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","unshift","error","filter","v","i","post","find","id","PostId","Likers","push","UserId","LOAD_USER_POSTS_REQUEST","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_SUCCESS","concat","length","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_FAILURE","Comments"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/reducers/post.tsx"],"sourcesContent":["import produce from 'immer';\r\n// import shortId from 'shortid';\r\n// import { faker } from '@faker-js/faker';\r\n\r\nexport type mainPost = {\r\n    mainPosts: any,\r\n    singlePost: any,\r\n    imagePaths: object[],\r\n    likePostLoading: boolean,\r\n    likePostDone: boolean,\r\n    likePostError: boolean,\r\n    unlikePostLoading: boolean,\r\n    unlikePostDone: boolean,\r\n    unlikePostError: boolean,\r\n    addPostLoading: boolean,\r\n    addPostDone: boolean,\r\n    addPostError: boolean,\r\n    addCommentLoading: boolean,\r\n    addCommentDone: boolean,\r\n    addCommentError: boolean,\r\n    hasMorePosts: boolean,\r\n    loadPostLoading: boolean,\r\n    loadPostDone: boolean,\r\n    loadPostError: boolean,\r\n    loadPostsLoading: boolean,\r\n    loadPostsDone: boolean,\r\n    loadPostsError: boolean,\r\n    removePostLoading: boolean,\r\n    removePostDone: boolean,\r\n    removePostError: boolean,\r\n    uploadImagesLoading: boolean,\r\n    uploadImagesDone: boolean,\r\n    uploadImagesError: boolean,\r\n    retweetLoading: boolean,\r\n    retweetDone: boolean,\r\n    retweetError: boolean,\r\n}\r\n\r\nexport const initialState: mainPost = {\r\n    //     {\r\n    //     id: 1,\r\n    //     User: {\r\n    //         id: 1,\r\n    //         nickname: 'TaeIl'\r\n    //     },\r\n    //     content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n    //     Images: [{\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n    //     }],\r\n    //     // 대문자는 서버에서 주는 애들\r\n    //     Comments: [{\r\n    //         id: shortId.generate(),\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: 'nero',\r\n    //         },\r\n    //         content: '우와 개정판이 나왔군요~',\r\n    //     }, {\r\n    //         id: shortId.generate(),\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: 'hero',\r\n    //         },\r\n    //         content: '얼른 사고싶어요~',\r\n    //     }]\r\n    // }\r\n    mainPosts: [],\r\n    singlePost: null,\r\n    imagePaths: [],\r\n    hasMorePosts: true, // 무한 스크롤\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    loadPostLoading: false,\r\n    loadPostDone: false,\r\n    loadPostError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n}\r\n\r\n// infinite scrolling\r\n// export const generateDummyPost = (number) => Array(number).fill(undefined).map(() => ({\r\n//     id: shortId.generate(),\r\n//     User: {\r\n//         id: shortId.generate(),\r\n//         nickname: faker.internet.userName(),\r\n//     },\r\n//     content: faker.lorem.paragraph(),\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     }],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: shortId.generate(),\r\n//             nickname: faker.internet.userName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }));\r\n\r\n\r\n// 변수로 지정해주면 편하다\r\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\r\n\r\n// 화면 로딩하면\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST' as const;\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS' as const;\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE' as const;\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST' as const;\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS' as const;\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE' as const;\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST' as const;\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS' as const;\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE' as const;\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POSTS_REQUEST' as const;\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POSTS_SUCCESS' as const;\r\nexport const LOAD_POST_FAILURE = 'LOAD_POSTS_FAILURE' as const;\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST' as const;\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS' as const;\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE' as const;\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST' as const;\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS' as const;\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE' as const;\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST' as const;\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS' as const;\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE' as const;\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST' as const;\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS' as const;\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE' as const;\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST' as const;\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS' as const;\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE' as const;\r\n\r\n// 동기 액션은 하나만 만들면 된다\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE' as const;\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\n\r\n// 동적 액션 크리에이터\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\n// const dummyPost = (data) => ({\r\n//     // shortId를 넣으면 더미데이터 Encountered two children with the same key에러는 해결이 되지만\r\n//     // Failed prop type에러가 뜬다. 나중에 실제 데이터 넣어서 해결해야 할 듯\r\n//     id: data.id,\r\n//     // 게시글\r\n//     content: data.content,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'Violet',\r\n//     },\r\n//     Images: [],\r\n//     Comments: [],\r\n// });\r\n\r\n// const dummyComment = (data) => ({ // 더미 코멘트\r\n//     id: shortId.generate(),\r\n//     content: data,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'Violet',\r\n//     },\r\n// });\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case RETWEET_REQUEST:\r\n            draft.retweetLoading = true;\r\n            draft.retweetDone = false;\r\n            draft.retweetError = null;\r\n            break;\r\n        case RETWEET_SUCCESS: {\r\n            draft.retweetLoading = false;\r\n            draft.retweetDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            break;\r\n        }\r\n        case RETWEET_FAILURE:\r\n            draft.retweetLoading = false;\r\n            draft.retweetError = action.error;\r\n            break;\r\n        case REMOVE_IMAGE:\r\n            draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n            break;\r\n        case UPLOAD_IMAGES_REQUEST:\r\n            draft.uploadImagesLoading = true;\r\n            draft.uploadImagesDone = false;\r\n            draft.uploadImagesError = null;\r\n            break;\r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n            draft.imagePaths = action.data;\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesDone = true;\r\n            break;\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE:\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesError = action.error;\r\n            break;\r\n        case LIKE_POST_REQUEST:\r\n            draft.likePostLoading = true;\r\n            draft.likePostDone = false;\r\n            draft.likePostError = null;\r\n            break;\r\n        case LIKE_POST_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers.push({ id: action.data.UserId });\r\n            draft.likePostLoading = false;\r\n            draft.likePostDone = true;\r\n            break;\r\n        }\r\n        case LIKE_POST_FAILURE:\r\n            draft.likePostLoading = false;\r\n            draft.likePostError = action.error;\r\n            break;\r\n        case UNLIKE_POST_REQUEST:\r\n            draft.unlikePostLoading = true;\r\n            draft.unlikePostDone = false;\r\n            draft.unlikePostError = null;\r\n            break;\r\n        case UNLIKE_POST_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostDone = true;\r\n            break;\r\n        }\r\n        case UNLIKE_POST_FAILURE:\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostError = action.error;\r\n            break;\r\n        case LOAD_POST_REQUEST:\r\n            draft.loadPostLoading = true;\r\n            draft.loadPostDone = false;\r\n            draft.loadPostError = null;\r\n            break;\r\n        case LOAD_POST_SUCCESS:\r\n            draft.loadPostLoading = false;\r\n            draft.loadPostDone = true;\r\n            draft.singlePost = action.data;\r\n            break;\r\n        case LOAD_POST_FAILURE:\r\n            draft.loadPostLoading = false;\r\n            draft.loadPostError = action.error;\r\n            break;\r\n        case LOAD_USER_POSTS_REQUEST:\r\n        case LOAD_POSTS_REQUEST:\r\n        case LOAD_HASHTAG_POSTS_REQUEST:\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break;\r\n        case LOAD_USER_POSTS_SUCCESS:\r\n        case LOAD_HASHTAG_POSTS_SUCCESS:\r\n        case LOAD_POSTS_SUCCESS:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsDone = true;\r\n            draft.mainPosts = draft.mainPosts.concat(action.data);\r\n            draft.hasMorePosts = action.data.length === 10;\r\n            break;\r\n        case LOAD_USER_POSTS_FAILURE:\r\n        case LOAD_HASHTAG_POSTS_FAILURE:\r\n        case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break;\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.imagePaths = [];\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = false;\r\n            draft.addPostError = action.error;\r\n            break;\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = false;\r\n            draft.removePostError = action.error;\r\n            break;\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Comments.unshift(action.data);\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            break;\r\n            // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            // const post = { ...state.mainPosts[postIndex] };\r\n            // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            // const mainPosts = [...state.mainPosts];\r\n            // mainPosts[postIndex] = post;\r\n            // return {\r\n            //   ...state,\r\n            //   mainPosts,\r\n            //   addCommentLoading: false,\r\n            //   addCommentDone: true,\r\n            // };\r\n        }\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentError = action.error;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}