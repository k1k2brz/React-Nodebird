{"ast":null,"code":"import { all, fork, delay, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_REQUEST, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_USER_REQUEST } from '../reducers/user';\n\n// SAGA를 통해 백엔드 (port 3065에 요청)\n// axios보낼 https주소 saga폴더 index에 중복되는 부분 변수로 묶어줌\nfunction loadUserAPI() {\n  return axios.get('/user', {\n    withCredentials: true\n  });\n}\n;\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\nfunction* follow(action) {\n  try {\n    // const result = yield call(followAPI)\n    // yield delay(1000); 더미데이터용\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction unfollowAPI() {\n  return axios.post('/api/unfollow');\n}\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(unfollowAPI)\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// login 할때 받아와야 하는 data\nfunction logInAPI(data) {\n  // API는 제너레이터가 아님 주의할 것 \n  return axios.post('/user/login', data);\n}\n\n// call을 사용하면 이렇게 펼쳐서 적어줘야 함\n// logInAPI(action.data);\n// call(logInAPI, action.data);\n\n// action.type 하면 Login request가 나오고 action.data하면 로그인 데이터가 들어있음\nfunction* logIn(action) {\n  // 요청의 결과를 받는다.\n  try {\n    // fork는 비동기 함수호출 (결과값 상관없이 바로 실행)\n    // call은 동기 함수호출 (결과값 받아올 때 까지 기다림 (ex)then(() => )를 받아오듯)\n\n    const result = yield call(logInAPI, action.data);\n    // yield delay(1000); // 서버가 아직 없기 때문에\n    // call(logInAPI, action.data)처럼 작성해야 테스트하기 쉽다.\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n      // data: action.data, 더미용\n    });\n  } catch (err) {\n    //성공은 result.data 실패는 err.response.data에 담긴다\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    // yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction signUpAPI(data) {\n  // data는 email, password, nickname (signUp에서 넘어옴)\n  return axios.post('/user', data);\n}\nfunction* signUp(action) {\n  try {\n    // action.data 넣어주면 signUpAPI에서 data받기 가능\n    const result = yield call(signUpAPI, action.data);\n    // yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n// 한 번 밖에 받지 않는다 (1번 받고나면 이벤트 리스너 사라짐)\n// 1. takeEvery를 사용하거나 (while문 대체) 2. while로 감싸서 무한으로 실행되게 해준다. (잘 안씀)\nfunction* watchLogIn() {\n  // LOG_IN이란 액션이 실행될 때 까지 기다리겠다.\n  // 어차피 Login이 request 되는 순간에 실행되니까\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n  // 만약 takeLatest를 사용하면 2회 이상 연속으로 눌렀을 때 마지막꺼만 실행 (마우스 고장 등으로)\n  // 그러나 프론트에서만 마지막꺼 사용하는거고 백엔드에서는 두번 요청 보냄 (서버에는 두번 저장된다)\n  // throttle로 시간제한을 둬서 제한시간 이내 여러번 클릭시 한번만 요청하게 함\n\n  // 첫번째꺼만 실행하는 방법도 있음 takeReading?\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["all","fork","delay","put","takeLatest","call","axios","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_FAILURE","LOG_OUT_REQUEST","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOAD_USER_REQUEST","loadUserAPI","get","withCredentials","loadUser","action","result","type","data","err","error","response","followAPI","post","follow","unfollowAPI","unfollow","logInAPI","logIn","logOutAPI","logOut","signUpAPI","signUp","watchLoadUser","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/sagas/user.tsx"],"sourcesContent":["import { all, fork, delay, put, takeEvery, takeLatest, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_REQUEST,\r\n    SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS,\r\n    FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS,\r\n    FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_USER_REQUEST,\r\n} from '../reducers/user';\r\n\r\n// SAGA를 통해 백엔드 (port 3065에 요청)\r\n// axios보낼 https주소 saga폴더 index에 중복되는 부분 변수로 묶어줌\r\nfunction loadUserAPI() {\r\n    return axios.get('/user', {\r\n        withCredentials: true,\r\n    });\r\n};\r\n\r\nfunction* loadUser(action) {\r\n    try {\r\n        const result = yield call(loadUserAPI)\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction followAPI() {\r\n    return axios.post('/api/follow')\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        // const result = yield call(followAPI)\r\n        // yield delay(1000); 더미데이터용\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n    return axios.post('/api/unfollow')\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        // const result = yield call(unfollowAPI)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n// login 할때 받아와야 하는 data\r\nfunction logInAPI(data) {\r\n    // API는 제너레이터가 아님 주의할 것 \r\n    return axios.post('/user/login', data)\r\n}\r\n\r\n// call을 사용하면 이렇게 펼쳐서 적어줘야 함\r\n// logInAPI(action.data);\r\n// call(logInAPI, action.data);\r\n\r\n// action.type 하면 Login request가 나오고 action.data하면 로그인 데이터가 들어있음\r\nfunction* logIn(action) {\r\n    // 요청의 결과를 받는다.\r\n    try {\r\n        // fork는 비동기 함수호출 (결과값 상관없이 바로 실행)\r\n        // call은 동기 함수호출 (결과값 받아올 때 까지 기다림 (ex)then(() => )를 받아오듯)\r\n\r\n        const result = yield call(logInAPI, action.data)\r\n        // yield delay(1000); // 서버가 아직 없기 때문에\r\n        // call(logInAPI, action.data)처럼 작성해야 테스트하기 쉽다.\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n            // data: action.data, 더미용\r\n        })\r\n    } catch (err) {\r\n        //성공은 result.data 실패는 err.response.data에 담긴다\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/user/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        yield call(logOutAPI)\r\n        // yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    // data는 email, password, nickname (signUp에서 넘어옴)\r\n    return axios.post('/user', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        // action.data 넣어주면 signUpAPI에서 data받기 가능\r\n        const result = yield call(signUpAPI, action.data)\r\n        // yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n    yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n}\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n// 한 번 밖에 받지 않는다 (1번 받고나면 이벤트 리스너 사라짐)\r\n// 1. takeEvery를 사용하거나 (while문 대체) 2. while로 감싸서 무한으로 실행되게 해준다. (잘 안씀)\r\nfunction* watchLogIn() {\r\n    // LOG_IN이란 액션이 실행될 때 까지 기다리겠다.\r\n    // 어차피 Login이 request 되는 순간에 실행되니까\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n    // 만약 takeLatest를 사용하면 2회 이상 연속으로 눌렀을 때 마지막꺼만 실행 (마우스 고장 등으로)\r\n    // 그러나 프론트에서만 마지막꺼 사용하는거고 백엔드에서는 두번 요청 보냄 (서버에는 두번 저장된다)\r\n    // throttle로 시간제한을 둬서 제한시간 이내 여러번 클릭시 한번만 요청하게 함\r\n\r\n    // 첫번째꺼만 실행하는 방법도 있음 takeReading?\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLoadUser),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}