{"ast":null,"code":"import { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nfunction uploadImagesAPI(data) {\n  // formData는 { data }이런식으로 감싸버리면 json이 되니까 {}적지 말 것\n  return axios.post('/post/images', data);\n}\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction likePostAPI(data) {\n  // data가 ${}안에 들어가기 때문에 굳이 안넣어도 됨\n  return axios.patch(`/post/${data}/like`);\n}\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    console.log(result);\n    // yield delay(1000);\n    // const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n      // data: generateDummyPost(10), // reducer에서 만든 함수\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n      // action.data에 작성한 글이 들어있음 (더미데이터)\n      // data: {\n      //     id,\n      //     content: action.data,\n      // }\n    });\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  // delete는 2번째 자리에 data 못 넣는다\n  return axios.delete(`/post/${data}`);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    // POST reducer 상태랑 user reducer상태랑 동시에 바꿀 수 없기 때문에 action이 2개가 나온다.\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      // action.data에 작성한 글이 들어있음\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  /** 쿠키를 같이 전달 해준다 (도메인이 다르면 쿠키도 전달이 안되니까 backend의 cors와 여기)\r\n   withCredentials: true로 쿠키전달 허용\r\n   */\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nfunction* watchLoadPosts() {\n  // 무한스크롤 이벤트 대량발생 방지\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","put","takeLatest","throttle","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","uploadImagesAPI","data","post","uploadImages","action","result","type","err","console","error","response","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostsAPI","get","loadPosts","log","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/sagas/post.tsx"],"sourcesContent":["import { all, fork, delay, put, takeEvery, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport axios from 'axios';\r\nimport {\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction uploadImagesAPI(data) {\r\n    // formData는 { data }이런식으로 감싸버리면 json이 되니까 {}적지 말 것\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    // data가 ${}안에 들어가기 때문에 굳이 안넣어도 됨\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/posts', data)\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.data)\r\n        console.log(result)\r\n        // yield delay(1000);\r\n        // const id = shortId.generate();\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n            // data: generateDummyPost(10), // reducer에서 만든 함수\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data)\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n            // action.data에 작성한 글이 들어있음 (더미데이터)\r\n            // data: {\r\n            //     id,\r\n            //     content: action.data,\r\n            // }\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    // delete는 2번째 자리에 data 못 넣는다\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data)\r\n        // POST reducer 상태랑 user reducer상태랑 동시에 바꿀 수 없기 때문에 action이 2개가 나온다.\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // action.data에 작성한 글이 들어있음\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    /** 쿠키를 같이 전달 해준다 (도메인이 다르면 쿠키도 전달이 안되니까 backend의 cors와 여기)\r\n     withCredentials: true로 쿠키전달 허용\r\n     */\r\n    return axios.post(`/post/${data.postId}/comment`, data) // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    // 무한스크롤 이벤트 대량발생 방지\r\n    yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}