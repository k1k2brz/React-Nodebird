{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport { faker } from '@faker-js/faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.internet.userName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image(),\n    nickname: faker.internet.userName()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.internet.userName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})));\n\n// 변수로 지정해주면 편하다\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\n\n// 동적 액션 크리에이터\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  // shortId를 넣으면 더미데이터 Encountered two children with the same key에러는 해결이 되지만\n  // Failed prop type에러가 뜬다. 나중에 실제 데이터 넣어서 해결해야 할 듯\n  id: data.id,\n  // 게시글\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'Violet'\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'Violet'\n  }\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  // 불변성을 지키면서 코드 작성하는게 어려우니까 도와주는 라이브러리 immer\n  // immer 사용\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      // return {\n      //     ...state,\n      // 맨 앞에 dummyPost추가해야 맨 위에 게시글 올라간다.\n      // sagas의 post에서 넘어온 게시글 action.data\n      // mainPosts: [dummyPost(action.data), ...state.mainPosts],\n      //     addPostLoading: true,\n      //     addPostDone: true,\n      // }\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = true;\n        draft.removePostDone = true;\n        // 앞에서 dummyPost추가해야 맨 위\n        // sagas의 post에서 넘어온 게시글 action.data\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          // action.data.content, postId, userId가 action.data에 들어있는 상태\n          // 불변성을 지키는 코드 (immer 라이브러리 사용하면 더 간단하게 가능)\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments]\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     // 앞에서 dummyPost추가해야 맨 위\n          //     mainPosts: [dummyPost, ...state.mainPosts],\n          //     addCommentLoading: true,\n          //     addCommentDone: true,\n          // }\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","id","generate","User","nickname","internet","userName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/reducers/post.tsx"],"sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport { faker } from '@faker-js/faker';\r\n\r\nexport type mainPost = {\r\n    mainPosts: any,\r\n    imagePaths: object[],\r\n    addPostLoading: boolean,\r\n    addPostDone: boolean,\r\n    addPostError: boolean,\r\n    addCommentLoading: boolean,\r\n    addCommentDone: boolean,\r\n    addCommentError: boolean,\r\n    hasMorePosts: boolean,\r\n    loadPostsLoading: boolean,\r\n    loadPostsDone: boolean,\r\n    loadPostsError: boolean,\r\n    removePostLoading: boolean,\r\n    removePostDone: boolean,\r\n    removePostError: boolean,\r\n}\r\n\r\nexport const initialState: mainPost = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n}\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n    Array(20).fill().map(() => ({\r\n        id: shortId.generate(),\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.internet.userName(),\r\n        },\r\n        content: faker.lorem.paragraph(),\r\n        Images: [{\r\n            src: faker.image.image(),\r\n            nickname: faker.internet.userName(),\r\n        }],\r\n        Comments: [{\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: faker.internet.userName(),\r\n            },\r\n            content: faker.lorem.sentence(),\r\n        }],\r\n    }))\r\n)\r\n\r\n\r\n// 변수로 지정해주면 편하다\r\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST' as const;\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS' as const;\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE' as const;\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST' as const;\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS' as const;\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE' as const;\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST' as const;\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS' as const;\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE' as const;\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST' as const;\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS' as const;\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE' as const;\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\n\r\n// 동적 액션 크리에이터\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n    // shortId를 넣으면 더미데이터 Encountered two children with the same key에러는 해결이 되지만\r\n    // Failed prop type에러가 뜬다. 나중에 실제 데이터 넣어서 해결해야 할 듯\r\n    id: data.id,\r\n    // 게시글\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Violet',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Violet',\r\n    },\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state: mainPost = initialState, action: any) => {\r\n    // 불변성을 지키면서 코드 작성하는게 어려우니까 도와주는 라이브러리 immer\r\n    // immer 사용\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            // return {\r\n            //     ...state,\r\n            // 맨 앞에 dummyPost추가해야 맨 위에 게시글 올라간다.\r\n            // sagas의 post에서 넘어온 게시글 action.data\r\n            // mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n            //     addPostLoading: true,\r\n            //     addPostDone: true,\r\n            // }\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = true;\r\n                // 앞에서 dummyPost추가해야 맨 위\r\n                // sagas의 post에서 넘어온 게시글 action.data\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // action.data.content, postId, userId가 action.data에 들어있는 상태\r\n                // 불변성을 지키는 코드 (immer 라이브러리 사용하면 더 간단하게 가능)\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments]\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     // 앞에서 dummyPost추가해야 맨 위\r\n                //     mainPosts: [dummyPost, ...state.mainPosts],\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: true,\r\n                // }\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}