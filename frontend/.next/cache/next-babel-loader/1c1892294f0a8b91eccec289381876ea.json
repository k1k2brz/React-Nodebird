{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport shortId from 'shortid';\nimport produce from 'immer';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'TaeIl'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    // 대문자는 서버에서 주는 애들\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n// 변수로 지정해주면 편하다\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\n\n// 동적 액션 크리에이터\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    // shortId를 넣으면 더미데이터 Encountered two children with the same key에러는 해결이 되지만\n    // Failed prop type에러가 뜬다. 나중에 실제 데이터 넣어서 해결해야 할 듯\n    id: data.id,\n    // 게시글\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'Violet'\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'Violet'\n    }\n  };\n};\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  // 불변성을 지키면서 코드 작성하는게 어려우니까 도와주는 라이브러리\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // 맨 앞에 dummyPost추가해야 맨 위에 게시글 올라간다.\n          // sagas의 post에서 넘어온 게시글 action.data\n          // mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          addPostLoading: true,\n          addPostDone: true\n        });\n      case ADD_POST_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: false,\n          addPostError: action.error\n        });\n      case REMOVE_POST_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: true,\n          removePostDone: false,\n          removePostError: null\n        });\n      case REMOVE_POST_SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // 앞에서 dummyPost추가해야 맨 위\n          // sagas의 post에서 넘어온 게시글 action.data\n          mainPosts: state.mainPosts.filter(function (v) {\n            return v.id !== action.data;\n          }),\n          removePostLoading: true,\n          removePostDone: true\n        });\n      case REMOVE_POST_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: false,\n          removePostError: action.error\n        });\n      case ADD_COMMENT_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: true,\n          addCommentDone: false,\n          addCommentError: null\n        });\n      case ADD_COMMENT_SUCCESS:\n        {\n          // action.data.content, postId, userId가 action.data에 들어있는 상태\n          // 불변성을 지키는 코드 (immer 라이브러리 사용하면 더 간단하게 가능)\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments]\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          return _objectSpread(_objectSpread({}, state), {}, {\n            // 앞에서 dummyPost추가해야 맨 위\n            mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n            addCommentLoading: true,\n            addCommentDone: true\n          });\n        }\n      case ADD_COMMENT_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentError: action.error\n        });\n      default:\n        return state;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","error","filter","v"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/reducers/post.tsx"],"sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\n\r\ntype mainPost = {\r\n    mainPosts: object[],\r\n    imagePaths: object[],\r\n    addPostLoading: boolean,\r\n    addPostDone: boolean,\r\n    addPostError: boolean,\r\n    addCommentLoading: boolean,\r\n    addCommentDone: boolean,\r\n    addCommentError: boolean,\r\n    hasMorePosts: boolean,\r\n    loadPostsLoading: boolean,\r\n    loadPostsDone: boolean,\r\n    loadPostsError: boolean,\r\n    removePostLoading: boolean,\r\n    removePostDone: boolean,\r\n    removePostError: boolean,\r\n}\r\n\r\nexport const initialState: mainPost = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: 'TaeIl'\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images: [{\r\n            id: shortId.generate(),\r\n            src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n        }],\r\n        // 대문자는 서버에서 주는 애들\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'nero',\r\n            },\r\n            content: '우와 개정판이 나왔군요~',\r\n        }, {\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'hero',\r\n            },\r\n            content: '얼른 사고싶어요~',\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n}\r\n// 변수로 지정해주면 편하다\r\n// as const를 지정하면 타입이 아니라 실제 값을 가리키게 됨\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST' as const;\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS' as const;\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE' as const;\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST' as const;\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS' as const;\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE' as const;\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST' as const;\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS' as const;\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE' as const;\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST' as const;\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS' as const;\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE' as const;\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\n\r\n// 동적 액션 크리에이터\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n    // shortId를 넣으면 더미데이터 Encountered two children with the same key에러는 해결이 되지만\r\n    // Failed prop type에러가 뜬다. 나중에 실제 데이터 넣어서 해결해야 할 듯\r\n    id: data.id,\r\n    // 게시글\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Violet',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Violet',\r\n    },\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state: mainPost = initialState, action: any) => {\r\n    // 불변성을 지키면서 코드 작성하는게 어려우니까 도와주는 라이브러리\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    // 맨 앞에 dummyPost추가해야 맨 위에 게시글 올라간다.\r\n                    // sagas의 post에서 넘어온 게시글 action.data\r\n                    // mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                    addPostLoading: true,\r\n                    addPostDone: true,\r\n                }\r\n            case ADD_POST_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    addPostLoading: false,\r\n                    addPostError: action.error,\r\n                }\r\n            case REMOVE_POST_REQUEST:\r\n                return {\r\n                    ...state,\r\n                    removePostLoading: true,\r\n                    removePostDone: false,\r\n                    removePostError: null,\r\n                }\r\n            case REMOVE_POST_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    // 앞에서 dummyPost추가해야 맨 위\r\n                    // sagas의 post에서 넘어온 게시글 action.data\r\n                    mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n                    removePostLoading: true,\r\n                    removePostDone: true,\r\n                }\r\n            case REMOVE_POST_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    removePostLoading: false,\r\n                    removePostError: action.error,\r\n                }\r\n            case ADD_COMMENT_REQUEST:\r\n                return {\r\n                    ...state,\r\n                    addCommentLoading: true,\r\n                    addCommentDone: false,\r\n                    addCommentError: null,\r\n                }\r\n            case ADD_COMMENT_SUCCESS: {\r\n                // action.data.content, postId, userId가 action.data에 들어있는 상태\r\n                // 불변성을 지키는 코드 (immer 라이브러리 사용하면 더 간단하게 가능)\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments]\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                return {\r\n                    ...state,\r\n                    // 앞에서 dummyPost추가해야 맨 위\r\n                    mainPosts: [dummyPost, ...state.mainPosts],\r\n                    addCommentLoading: true,\r\n                    addCommentDone: true,\r\n                }\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    addCommentLoading: false,\r\n                    addCommentError: action.error,\r\n                }\r\n            default:\r\n                return state;\r\n        }\r\n    });\r\n}\r\n\r\nexport default reducer;"],"mappings":";;;;AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,OAAO,MAAM,OAAO;AAoB3B,OAAO,IAAMC,YAAsB,GAAG;EAClCC,SAAS,EAAE,CAAC;IACRC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE;MACFD,EAAE,EAAE,CAAC;MACLE,QAAQ,EAAE;IACd,CAAC;IACDC,OAAO,EAAE,uBAAuB;IAChCC,MAAM,EAAE,CAAC;MACLJ,EAAE,EAAEJ,OAAO,CAACS,QAAQ,EAAE;MACtBC,GAAG,EAAE;IACT,CAAC,EAAE;MACCN,EAAE,EAAEJ,OAAO,CAACS,QAAQ,EAAE;MACtBC,GAAG,EAAE;IACT,CAAC,EAAE;MACCN,EAAE,EAAEJ,OAAO,CAACS,QAAQ,EAAE;MACtBC,GAAG,EAAE;IACT,CAAC,CAAC;IACF;IACAC,QAAQ,EAAE,CAAC;MACPP,EAAE,EAAEJ,OAAO,CAACS,QAAQ,EAAE;MACtBJ,IAAI,EAAE;QACFD,EAAE,EAAEJ,OAAO,CAACS,QAAQ,EAAE;QACtBH,QAAQ,EAAE;MACd,CAAC;MACDC,OAAO,EAAE;IACb,CAAC,EAAE;MACCH,EAAE,EAAEJ,OAAO,CAACS,QAAQ,EAAE;MACtBJ,IAAI,EAAE;QACFD,EAAE,EAAEJ,OAAO,CAACS,QAAQ,EAAE;QACtBH,QAAQ,EAAE;MACd,CAAC;MACDC,OAAO,EAAE;IACb,CAAC;EACL,CAAC,CAAC;EACFK,UAAU,EAAE,EAAE;EACdC,YAAY,EAAE,IAAI;EAClBC,gBAAgB,EAAE,KAAK;EACvBC,aAAa,EAAE,KAAK;EACpBC,cAAc,EAAE,IAAI;EACpBC,cAAc,EAAE,KAAK;EACrBC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,IAAI;EAClBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE,IAAI;EACrBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE;AACrB,CAAC;AACD;AACA;AACA,OAAO,IAAMC,kBAAkB,GAAG,oBAA6B;AAC/D,OAAO,IAAMC,kBAAkB,GAAG,oBAA6B;AAC/D,OAAO,IAAMC,kBAAkB,GAAG,oBAA6B;AAE/D,OAAO,IAAMC,gBAAgB,GAAG,kBAA2B;AAC3D,OAAO,IAAMC,gBAAgB,GAAG,kBAA2B;AAC3D,OAAO,IAAMC,gBAAgB,GAAG,kBAA2B;AAE3D,OAAO,IAAMC,mBAAmB,GAAG,qBAA8B;AACjE,OAAO,IAAMC,mBAAmB,GAAG,qBAA8B;AACjE,OAAO,IAAMC,mBAAmB,GAAG,qBAA8B;AAEjE,OAAO,IAAMC,mBAAmB,GAAG,qBAA8B;AACjE,OAAO,IAAMC,mBAAmB,GAAG,qBAA8B;AACjE,OAAO,IAAMC,mBAAmB,GAAG,qBAA8B;AAEjE,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAO,CAAIC,IAAI;EAAA,OAAM;IAC9BC,IAAI,EAAEX,gBAAgB;IACtBU,IAAI,EAAJA;EACJ,CAAC;AAAA,CAAC;;AAEF;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAU,CAAIF,IAAI;EAAA,OAAM;IACjCC,IAAI,EAAEL,mBAAmB;IACzBI,IAAI,EAAJA;EACJ,CAAC;AAAA,CAAC;AAEF,IAAMG,SAAS,GAAG,SAAZA,SAAS,CAAIH,IAAI;EAAA,OAAM;IACzB;IACA;IACAnC,EAAE,EAAEmC,IAAI,CAACnC,EAAE;IACX;IACAG,OAAO,EAAEgC,IAAI,CAAChC,OAAO;IACrBF,IAAI,EAAE;MACFD,EAAE,EAAE,CAAC;MACLE,QAAQ,EAAE;IACd,CAAC;IACDE,MAAM,EAAE,EAAE;IACVG,QAAQ,EAAE;EACd,CAAC;AAAA,CAAC;AAEF,IAAMgC,YAAY,GAAG,SAAfA,YAAY,CAAIJ,IAAI;EAAA,OAAM;IAC5BnC,EAAE,EAAEJ,OAAO,CAACS,QAAQ,EAAE;IACtBF,OAAO,EAAEgC,IAAI;IACblC,IAAI,EAAE;MACFD,EAAE,EAAE,CAAC;MACLE,QAAQ,EAAE;IACd;EACJ,CAAC;AAAA,CAAC;;AAEF;AACA,IAAMsC,OAAO,GAAG,SAAVA,OAAO,GAAoD;EAAA,IAAhDC,KAAe,uEAAG3C,YAAY;EAAA,IAAE4C,MAAW;EACxD;EACA,OAAO7C,OAAO,CAAC4C,KAAK,EAAE,UAACE,KAAK,EAAK;IAC7B,QAAQD,MAAM,CAACN,IAAI;MACf,KAAKX,gBAAgB;QACjBkB,KAAK,CAAC9B,cAAc,GAAG,IAAI;QAC3B8B,KAAK,CAAC7B,WAAW,GAAG,KAAK;QACzB6B,KAAK,CAAC5B,YAAY,GAAG,IAAI;QACzB;MACJ,KAAKW,gBAAgB;QACjB,uCACOe,KAAK;UACR;UACA;UACA;UACA5B,cAAc,EAAE,IAAI;UACpBC,WAAW,EAAE;QAAI;MAEzB,KAAKa,gBAAgB;QACjB,uCACOc,KAAK;UACR5B,cAAc,EAAE,KAAK;UACrBE,YAAY,EAAE2B,MAAM,CAACE;QAAK;MAElC,KAAKhB,mBAAmB;QACpB,uCACOa,KAAK;UACRzB,iBAAiB,EAAE,IAAI;UACvBC,cAAc,EAAE,KAAK;UACrBC,eAAe,EAAE;QAAI;MAE7B,KAAKW,mBAAmB;QACpB,uCACOY,KAAK;UACR;UACA;UACA1C,SAAS,EAAE0C,KAAK,CAAC1C,SAAS,CAAC8C,MAAM,CAAC,UAACC,CAAC;YAAA,OAAKA,CAAC,CAAC9C,EAAE,KAAK0C,MAAM,CAACP,IAAI;UAAA,EAAC;UAC9DnB,iBAAiB,EAAE,IAAI;UACvBC,cAAc,EAAE;QAAI;MAE5B,KAAKa,mBAAmB;QACpB,uCACOW,KAAK;UACRzB,iBAAiB,EAAE,KAAK;UACxBE,eAAe,EAAEwB,MAAM,CAACE;QAAK;MAErC,KAAKb,mBAAmB;QACpB,uCACOU,KAAK;UACRtB,iBAAiB,EAAE,IAAI;UACvBC,cAAc,EAAE,KAAK;UACrBC,eAAe,EAAE;QAAI;MAE7B,KAAKW,mBAAmB;QAAE;UACtB;UACA;UACA;UACA;UACA;UACA;UACA;UACA,uCACOS,KAAK;YACR;YACA1C,SAAS,GAAGuC,SAAS,4BAAKG,KAAK,CAAC1C,SAAS,EAAC;YAC1CoB,iBAAiB,EAAE,IAAI;YACvBC,cAAc,EAAE;UAAI;QAE5B;MACA,KAAKa,mBAAmB;QACpB,uCACOQ,KAAK;UACRtB,iBAAiB,EAAE,KAAK;UACxBE,eAAe,EAAEqB,MAAM,CAACE;QAAK;MAErC;QACI,OAAOH,KAAK;IAAC;EAEzB,CAAC,CAAC;AACN,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}