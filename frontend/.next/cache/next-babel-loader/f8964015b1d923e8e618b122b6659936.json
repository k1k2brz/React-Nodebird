{"ast":null,"code":"import { all, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_REQUEST, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_FAILURE, CHANGE_NICKNAME_SUCCESS } from '../reducers/user';\n\n// SAGA를 통해 백엔드 (port 3065에 요청)\n// axios보낼 https주소 saga폴더 index에 중복되는 부분 변수로 묶어줌\n// withCredentials 공통설정 해줘서 자동으로 들어감\n\nfunction loadFollowersAPI(data) {\n  return axios.get('/user/followers', data);\n}\nfunction* loadFollowers(action) {\n  try {\n    const result = yield call(loadFollowersAPI, action.data);\n    yield put({\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction loadFollowingsAPI(data) {\n  return axios.get('/user/followings', data);\n}\nfunction* loadFollowings(action) {\n  try {\n    const result = yield call(loadFollowingsAPI, action.data);\n    yield put({\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction followAPI(data) {\n  return axios.patch(`/user/${data}/follow`);\n}\nfunction* follow(action) {\n  try {\n    const result = yield call(followAPI, action.data);\n    // yield delay(1000); 더미데이터용\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction unfollowAPI(data) {\n  return axios.delete(`/user/${data}/follow`);\n}\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction changeNicknameAPI(data) {\n  return axios.patch('/user/nickname', {\n    nickname: data\n  });\n}\n;\nfunction* changeNickname(action) {\n  try {\n    const result = yield call(changeNicknameAPI, action.data);\n    console.log(result);\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: CHANGE_NICKNAME_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction loadUserAPI(data) {\n  return axios.get('/user');\n}\n;\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    console.log(result);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// login 할때 받아와야 하는 data\nfunction logInAPI(data) {\n  // API는 제너레이터가 아님 주의할 것 \n  return axios.post('/user/login', data);\n}\n\n// call을 사용하면 이렇게 펼쳐서 적어줘야 함\n// logInAPI(action.data);\n// call(logInAPI, action.data);\n\n// action.type 하면 Login request가 나오고 action.data하면 로그인 데이터가 들어있음\nfunction* logIn(action) {\n  // 요청의 결과를 받는다.\n  try {\n    // fork는 비동기 함수호출 (결과값 상관없이 바로 실행)\n    // call은 동기 함수호출 (결과값 받아올 때 까지 기다림 (ex)then(() => )를 받아오듯)\n\n    const result = yield call(logInAPI, action.data);\n    // yield delay(1000); // 서버가 아직 없기 때문에\n    // call(logInAPI, action.data)처럼 작성해야 테스트하기 쉽다.\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n      // data: action.data, 더미용\n    });\n  } catch (err) {\n    //성공은 result.data 실패는 err.response.data에 담긴다\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    // yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction signUpAPI(data) {\n  // data는 email, password, nickname (signUp에서 넘어옴)\n  return axios.post('/user', data);\n}\nfunction* signUp(action) {\n  try {\n    // action.data 넣어주면 signUpAPI에서 data받기 가능\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    // yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n// 한 번 밖에 받지 않는다 (1번 받고나면 이벤트 리스너 사라짐)\n// 1. takeEvery를 사용하거나 (while문 대체) 2. while로 감싸서 무한으로 실행되게 해준다. (잘 안씀)\nfunction* watchLogIn() {\n  // LOG_IN이란 액션이 실행될 때 까지 기다리겠다.\n  // 어차피 Login이 request 되는 순간에 실행되니까\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n  // 만약 takeLatest를 사용하면 2회 이상 연속으로 눌렀을 때 마지막꺼만 실행 (마우스 고장 등으로)\n  // 그러나 프론트에서만 마지막꺼 사용하는거고 백엔드에서는 두번 요청 보냄 (서버에는 두번 저장된다)\n  // throttle로 시간제한을 둬서 제한시간 이내 여러번 클릭시 한번만 요청하게 함\n\n  // 첫번째꺼만 실행하는 방법도 있음 takeReading?\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nexport default function* userSaga() {\n  yield all([fork(watchChangeNickname), fork(watchLoadUser), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["all","fork","put","takeLatest","call","axios","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_FAILURE","LOG_OUT_REQUEST","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_FAILURE","CHANGE_NICKNAME_SUCCESS","loadFollowersAPI","data","get","loadFollowers","action","result","type","LOAD_FOLLOWERS_SUCCESS","err","console","error","LOAD_FOLLOWERS_FAILURE","response","loadFollowingsAPI","loadFollowings","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","followAPI","patch","follow","unfollowAPI","delete","unfollow","changeNicknameAPI","nickname","changeNickname","log","loadUserAPI","loadUser","logInAPI","post","logIn","logOutAPI","logOut","signUpAPI","signUp","watchChangeNickname","watchLoadUser","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["C:/Users/TaeIl/Desktop/frontStudy/React-Nodebird/frontend/sagas/user.tsx"],"sourcesContent":["import { all, fork, delay, put, takeEvery, takeLatest, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_REQUEST,\r\n    SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS,\r\n    FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS,\r\n    FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE,\r\n    LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE,\r\n    CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_FAILURE, CHANGE_NICKNAME_SUCCESS,\r\n} from '../reducers/user';\r\n\r\n// SAGA를 통해 백엔드 (port 3065에 요청)\r\n// axios보낼 https주소 saga폴더 index에 중복되는 부분 변수로 묶어줌\r\n// withCredentials 공통설정 해줘서 자동으로 들어감\r\n\r\nfunction loadFollowersAPI(data) {\r\n    return axios.get('/user/followers', data);\r\n}\r\n\r\nfunction* loadFollowers(action) {\r\n    try {\r\n        const result = yield call(loadFollowersAPI, action.data);\r\n        yield put({\r\n            type: LOAD_FOLLOWERS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_FOLLOWERS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadFollowingsAPI(data) {\r\n    return axios.get('/user/followings', data);\r\n}\r\n\r\nfunction* loadFollowings(action) {\r\n    try {\r\n        const result = yield call(loadFollowingsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_FOLLOWINGS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_FOLLOWINGS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction followAPI(data) {\r\n    return axios.patch(`/user/${data}/follow`)\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        const result = yield call(followAPI, action.data)\r\n        // yield delay(1000); 더미데이터용\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n    return axios.delete(`/user/${data}/follow`)\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        const result = yield call(unfollowAPI, action.data)\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction changeNicknameAPI(data) {\r\n    return axios.patch('/user/nickname', { nickname: data });\r\n};\r\n\r\nfunction* changeNickname(action) {\r\n    try {\r\n        const result = yield call(changeNicknameAPI, action.data);\r\n        console.log(result)\r\n        yield put({\r\n            type: CHANGE_NICKNAME_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: CHANGE_NICKNAME_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadUserAPI(data) {\r\n    return axios.get('/user');\r\n};\r\n\r\nfunction* loadUser(action) {\r\n    try {\r\n        const result = yield call(loadUserAPI, action.data);\r\n        console.log(result)\r\n        yield put({\r\n            type: LOAD_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n// login 할때 받아와야 하는 data\r\nfunction logInAPI(data) {\r\n    // API는 제너레이터가 아님 주의할 것 \r\n    return axios.post('/user/login', data)\r\n}\r\n\r\n// call을 사용하면 이렇게 펼쳐서 적어줘야 함\r\n// logInAPI(action.data);\r\n// call(logInAPI, action.data);\r\n\r\n// action.type 하면 Login request가 나오고 action.data하면 로그인 데이터가 들어있음\r\nfunction* logIn(action) {\r\n    // 요청의 결과를 받는다.\r\n    try {\r\n        // fork는 비동기 함수호출 (결과값 상관없이 바로 실행)\r\n        // call은 동기 함수호출 (결과값 받아올 때 까지 기다림 (ex)then(() => )를 받아오듯)\r\n\r\n        const result = yield call(logInAPI, action.data)\r\n        // yield delay(1000); // 서버가 아직 없기 때문에\r\n        // call(logInAPI, action.data)처럼 작성해야 테스트하기 쉽다.\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n            // data: action.data, 더미용\r\n        });\r\n    } catch (err) {\r\n        //성공은 result.data 실패는 err.response.data에 담긴다\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/user/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        yield call(logOutAPI)\r\n        // yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    // data는 email, password, nickname (signUp에서 넘어옴)\r\n    return axios.post('/user', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        // action.data 넣어주면 signUpAPI에서 data받기 가능\r\n        const result = yield call(signUpAPI, action.data)\r\n        console.log(result)\r\n        // yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchChangeNickname() {\r\n    yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\r\n}\r\nfunction* watchLoadUser() {\r\n    yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n}\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n// 한 번 밖에 받지 않는다 (1번 받고나면 이벤트 리스너 사라짐)\r\n// 1. takeEvery를 사용하거나 (while문 대체) 2. while로 감싸서 무한으로 실행되게 해준다. (잘 안씀)\r\nfunction* watchLogIn() {\r\n    // LOG_IN이란 액션이 실행될 때 까지 기다리겠다.\r\n    // 어차피 Login이 request 되는 순간에 실행되니까\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n    // 만약 takeLatest를 사용하면 2회 이상 연속으로 눌렀을 때 마지막꺼만 실행 (마우스 고장 등으로)\r\n    // 그러나 프론트에서만 마지막꺼 사용하는거고 백엔드에서는 두번 요청 보냄 (서버에는 두번 저장된다)\r\n    // throttle로 시간제한을 둬서 제한시간 이내 여러번 클릭시 한번만 요청하게 함\r\n\r\n    // 첫번째꺼만 실행하는 방법도 있음 takeReading?\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchChangeNickname),\r\n        fork(watchLoadUser),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}